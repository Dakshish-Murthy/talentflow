{"ast":null,"code":"const API_BASE = '/api';\nconst simulateLatency = (min = 200, max = 1200) => new Promise(resolve => setTimeout(resolve, Math.random() * (max - min) + min));\nconst simulateError = (errorRate = 0.1) => Math.random() < errorRate;\nexport const api = {\n  // Jobs endpoints\n  async getJobs(params = {}) {\n    await simulateLatency();\n    if (simulateError(0.05)) throw new Error('Failed to fetch jobs');\n    const queryParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== null && value !== '') {\n        queryParams.append(key, value.toString());\n      }\n    });\n    const response = await fetch(`${API_BASE}/jobs?${queryParams}`);\n    if (!response.ok) throw new Error('Failed to fetch jobs');\n    return response.json();\n  },\n  async createJob(job) {\n    await simulateLatency();\n    if (simulateError(0.1)) throw new Error('Failed to create job');\n    const response = await fetch(`${API_BASE}/jobs`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(job)\n    });\n    if (!response.ok) throw new Error('Failed to create job');\n    return response.json();\n  },\n  async updateJob(id, updates) {\n    await simulateLatency();\n    if (simulateError(0.1)) throw new Error('Failed to update job');\n    const response = await fetch(`${API_BASE}/jobs/${id}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updates)\n    });\n    if (!response.ok) throw new Error('Failed to update job');\n    return response.json();\n  },\n  async reorderJobs(fromOrder, toOrder) {\n    await simulateLatency();\n    if (simulateError(0.1)) throw new Error('Reorder failed');\n    const response = await fetch(`${API_BASE}/jobs/reorder`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fromOrder,\n        toOrder\n      })\n    });\n    if (!response.ok) throw new Error('Failed to reorder jobs');\n    return response.json();\n  },\n  // Candidates endpoints\n  async getCandidates(params = {}) {\n    await simulateLatency();\n    if (simulateError(0.05)) throw new Error('Failed to fetch candidates');\n    const queryParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== null && value !== '') {\n        queryParams.append(key, value.toString());\n      }\n    });\n    const response = await fetch(`${API_BASE}/candidates?${queryParams}`);\n    if (!response.ok) throw new Error('Failed to fetch candidates');\n    return response.json();\n  },\n  async createCandidate(candidate) {\n    await simulateLatency();\n    if (simulateError(0.1)) throw new Error('Failed to create candidate');\n    const response = await fetch(`${API_BASE}/candidates`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(candidate)\n    });\n    if (!response.ok) throw new Error('Failed to create candidate');\n    return response.json();\n  },\n  async updateCandidate(id, updates) {\n    await simulateLatency();\n    if (simulateError(0.1)) throw new Error('Failed to update candidate');\n    const response = await fetch(`${API_BASE}/candidates/${id}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updates)\n    });\n    if (!response.ok) throw new Error('Failed to update candidate');\n    return response.json();\n  },\n  async getCandidateTimeline(candidateId) {\n    await simulateLatency();\n    if (simulateError(0.05)) throw new Error('Failed to fetch candidate timeline');\n    const response = await fetch(`${API_BASE}/candidates/${candidateId}/timeline`);\n    if (!response.ok) throw new Error('Failed to fetch candidate timeline');\n    return response.json();\n  },\n  // Assessment endpoints\n  async getAssessment(jobId) {\n    await simulateLatency();\n    if (simulateError(0.05)) throw new Error('Failed to fetch assessment');\n    const response = await fetch(`${API_BASE}/assessments/${jobId}`);\n    if (!response.ok) throw new Error('Failed to fetch assessment');\n    return response.json();\n  },\n  async saveAssessment(assessment) {\n    await simulateLatency();\n    if (simulateError(0.1)) throw new Error('Failed to save assessment');\n    const response = await fetch(`${API_BASE}/assessments/${assessment.jobId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(assessment)\n    });\n    if (!response.ok) throw new Error('Failed to save assessment');\n    return response.json();\n  },\n  async submitAssessment(response) {\n    await simulateLatency();\n    if (simulateError(0.1)) throw new Error('Failed to submit assessment');\n    const apiResponse = await fetch(`${API_BASE}/assessments/${response.assessmentId}/submit`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(response)\n    });\n    if (!apiResponse.ok) throw new Error('Failed to submit assessment');\n    return apiResponse.json();\n  }\n};","map":{"version":3,"names":["API_BASE","simulateLatency","min","max","Promise","resolve","setTimeout","Math","random","simulateError","errorRate","api","getJobs","params","Error","queryParams","URLSearchParams","Object","entries","forEach","key","value","undefined","append","toString","response","fetch","ok","json","createJob","job","method","headers","body","JSON","stringify","updateJob","id","updates","reorderJobs","fromOrder","toOrder","getCandidates","createCandidate","candidate","updateCandidate","getCandidateTimeline","candidateId","getAssessment","jobId","saveAssessment","assessment","submitAssessment","apiResponse","assessmentId"],"sources":["C:/Users/Dakshish/talentflow/src/services/api.ts"],"sourcesContent":["import { Job, Candidate, Assessment, AssessmentResponse } from '../types';\r\n\r\nconst API_BASE = '/api';\r\n\r\nconst simulateLatency = (min: number = 200, max: number = 1200) => \r\n  new Promise(resolve => setTimeout(resolve, Math.random() * (max - min) + min));\r\n\r\nconst simulateError = (errorRate: number = 0.1) => Math.random() < errorRate;\r\n\r\nexport const api = {\r\n  // Jobs endpoints\r\n  async getJobs(params: any = {}) {\r\n    await simulateLatency();\r\n    if (simulateError(0.05)) throw new Error('Failed to fetch jobs');\r\n    \r\n    const queryParams = new URLSearchParams();\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null && value !== '') {\r\n        queryParams.append(key, value.toString());\r\n      }\r\n    });\r\n    \r\n    const response = await fetch(`${API_BASE}/jobs?${queryParams}`);\r\n    if (!response.ok) throw new Error('Failed to fetch jobs');\r\n    return response.json();\r\n  },\r\n\r\n  async createJob(job: Omit<Job, 'id' | 'createdAt' | 'updatedAt'>) {\r\n    await simulateLatency();\r\n    if (simulateError(0.1)) throw new Error('Failed to create job');\r\n    \r\n    const response = await fetch(`${API_BASE}/jobs`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(job),\r\n    });\r\n    if (!response.ok) throw new Error('Failed to create job');\r\n    return response.json();\r\n  },\r\n\r\n  async updateJob(id: string, updates: Partial<Job>) {\r\n    await simulateLatency();\r\n    if (simulateError(0.1)) throw new Error('Failed to update job');\r\n    \r\n    const response = await fetch(`${API_BASE}/jobs/${id}`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(updates),\r\n    });\r\n    if (!response.ok) throw new Error('Failed to update job');\r\n    return response.json();\r\n  },\r\n\r\n  async reorderJobs(fromOrder: number, toOrder: number) {\r\n    await simulateLatency();\r\n    if (simulateError(0.1)) throw new Error('Reorder failed');\r\n    \r\n    const response = await fetch(`${API_BASE}/jobs/reorder`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ fromOrder, toOrder }),\r\n    });\r\n    if (!response.ok) throw new Error('Failed to reorder jobs');\r\n    return response.json();\r\n  },\r\n\r\n  // Candidates endpoints\r\n  async getCandidates(params: any = {}) {\r\n    await simulateLatency();\r\n    if (simulateError(0.05)) throw new Error('Failed to fetch candidates');\r\n    \r\n    const queryParams = new URLSearchParams();\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null && value !== '') {\r\n        queryParams.append(key, value.toString());\r\n      }\r\n    });\r\n    \r\n    const response = await fetch(`${API_BASE}/candidates?${queryParams}`);\r\n    if (!response.ok) throw new Error('Failed to fetch candidates');\r\n    return response.json();\r\n  },\r\n\r\n  async createCandidate(candidate: Omit<Candidate, 'id' | 'appliedDate' | 'notes'>) {\r\n    await simulateLatency();\r\n    if (simulateError(0.1)) throw new Error('Failed to create candidate');\r\n    \r\n    const response = await fetch(`${API_BASE}/candidates`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(candidate),\r\n    });\r\n    if (!response.ok) throw new Error('Failed to create candidate');\r\n    return response.json();\r\n  },\r\n\r\n  async updateCandidate(id: string, updates: Partial<Candidate>) {\r\n    await simulateLatency();\r\n    if (simulateError(0.1)) throw new Error('Failed to update candidate');\r\n    \r\n    const response = await fetch(`${API_BASE}/candidates/${id}`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(updates),\r\n    });\r\n    if (!response.ok) throw new Error('Failed to update candidate');\r\n    return response.json();\r\n  },\r\n\r\n  async getCandidateTimeline(candidateId: string) {\r\n    await simulateLatency();\r\n    if (simulateError(0.05)) throw new Error('Failed to fetch candidate timeline');\r\n    \r\n    const response = await fetch(`${API_BASE}/candidates/${candidateId}/timeline`);\r\n    if (!response.ok) throw new Error('Failed to fetch candidate timeline');\r\n    return response.json();\r\n  },\r\n\r\n  // Assessment endpoints\r\n  async getAssessment(jobId: string) {\r\n    await simulateLatency();\r\n    if (simulateError(0.05)) throw new Error('Failed to fetch assessment');\r\n    \r\n    const response = await fetch(`${API_BASE}/assessments/${jobId}`);\r\n    if (!response.ok) throw new Error('Failed to fetch assessment');\r\n    return response.json();\r\n  },\r\n\r\n  async saveAssessment(assessment: Assessment) {\r\n    await simulateLatency();\r\n    if (simulateError(0.1)) throw new Error('Failed to save assessment');\r\n    \r\n    const response = await fetch(`${API_BASE}/assessments/${assessment.jobId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(assessment),\r\n    });\r\n    if (!response.ok) throw new Error('Failed to save assessment');\r\n    return response.json();\r\n  },\r\n\r\n  async submitAssessment(response: AssessmentResponse) {\r\n    await simulateLatency();\r\n    if (simulateError(0.1)) throw new Error('Failed to submit assessment');\r\n    \r\n    const apiResponse = await fetch(`${API_BASE}/assessments/${response.assessmentId}/submit`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(response),\r\n    });\r\n    if (!apiResponse.ok) throw new Error('Failed to submit assessment');\r\n    return apiResponse.json();\r\n  },\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}