{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { candidatesService } from '../services/candidatesService';\nexport const useCandidates = () => {\n  _s();\n  const [state, setState] = useState({\n    candidates: [],\n    loading: false,\n    pagination: {\n      page: 1,\n      pageSize: 12,\n      total: 0,\n      totalPages: 0\n    },\n    filters: {\n      search: '',\n      stage: ''\n    }\n  });\n  const loadCandidates = useCallback(async filters => {\n    setState(prev => ({\n      ...prev,\n      loading: true\n    }));\n    try {\n      const result = await candidatesService.getCandidates(filters);\n      setState(prev => ({\n        ...prev,\n        candidates: result.candidates,\n        pagination: {\n          page: result.page,\n          pageSize: result.pageSize,\n          total: result.total,\n          totalPages: result.totalPages\n        },\n        loading: false\n      }));\n    } catch (error) {\n      console.error('Failed to load candidates:', error);\n      setState(prev => ({\n        ...prev,\n        loading: false\n      }));\n    }\n  }, []);\n  const createCandidate = useCallback(async candidateData => {\n    try {\n      const newCandidate = await candidatesService.createCandidate(candidateData);\n      setState(prev => ({\n        ...prev,\n        candidates: [newCandidate, ...prev.candidates]\n      }));\n      return newCandidate;\n    } catch (error) {\n      console.error('Failed to create candidate:', error);\n      throw error;\n    }\n  }, []);\n  const updateCandidateStage = useCallback(async (id, stage) => {\n    try {\n      await candidatesService.updateCandidateStage(id, stage);\n      setState(prev => ({\n        ...prev,\n        candidates: prev.candidates.map(candidate => candidate.id === id ? {\n          ...candidate,\n          stage\n        } : candidate)\n      }));\n    } catch (error) {\n      console.error('Failed to update candidate stage:', error);\n      throw error;\n    }\n  }, []);\n  const updateFilters = useCallback(filters => {\n    setState(prev => ({\n      ...prev,\n      filters: {\n        ...prev.filters,\n        ...filters\n      },\n      pagination: {\n        ...prev.pagination,\n        page: 1\n      }\n    }));\n  }, []);\n  return {\n    ...state,\n    loadCandidates,\n    createCandidate,\n    updateCandidateStage,\n    updateFilters\n  };\n};\n_s(useCandidates, \"2DuIQtoSrjh+dlcLmoCI3lcdaSo=\");","map":{"version":3,"names":["useState","useCallback","candidatesService","useCandidates","_s","state","setState","candidates","loading","pagination","page","pageSize","total","totalPages","filters","search","stage","loadCandidates","prev","result","getCandidates","error","console","createCandidate","candidateData","newCandidate","updateCandidateStage","id","map","candidate","updateFilters"],"sources":["C:/Users/Dakshish/talentflow/src/hooks/useCandidates.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { Candidate } from '../types';\r\nimport { candidatesService } from '../services/candidatesService';\r\n\r\ninterface CandidatesState {\r\n  candidates: Candidate[];\r\n  loading: boolean;\r\n  pagination: {\r\n    page: number;\r\n    pageSize: number;\r\n    total: number;\r\n    totalPages: number;\r\n  };\r\n  filters: {\r\n    search: string;\r\n    stage: string;\r\n  };\r\n}\r\n\r\nexport const useCandidates = () => {\r\n  const [state, setState] = useState<CandidatesState>({\r\n    candidates: [],\r\n    loading: false,\r\n    pagination: {\r\n      page: 1,\r\n      pageSize: 12,\r\n      total: 0,\r\n      totalPages: 0,\r\n    },\r\n    filters: {\r\n      search: '',\r\n      stage: '',\r\n    },\r\n  });\r\n\r\n  const loadCandidates = useCallback(async (filters: {\r\n    page: number;\r\n    pageSize: number;\r\n    search?: string;\r\n    stage?: string;\r\n  }) => {\r\n    setState(prev => ({ ...prev, loading: true }));\r\n    \r\n    try {\r\n      const result = await candidatesService.getCandidates(filters);\r\n      setState(prev => ({\r\n        ...prev,\r\n        candidates: result.candidates,\r\n        pagination: {\r\n          page: result.page,\r\n          pageSize: result.pageSize,\r\n          total: result.total,\r\n          totalPages: result.totalPages,\r\n        },\r\n        loading: false,\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to load candidates:', error);\r\n      setState(prev => ({ ...prev, loading: false }));\r\n    }\r\n  }, []);\r\n\r\n  const createCandidate = useCallback(async (candidateData: Omit<Candidate, 'id' | 'appliedDate'>) => {\r\n    try {\r\n      const newCandidate = await candidatesService.createCandidate(candidateData);\r\n      setState(prev => ({\r\n        ...prev,\r\n        candidates: [newCandidate, ...prev.candidates],\r\n      }));\r\n      return newCandidate;\r\n    } catch (error) {\r\n      console.error('Failed to create candidate:', error);\r\n      throw error;\r\n    }\r\n  }, []);\r\n\r\n  const updateCandidateStage = useCallback(async (id: string, stage: Candidate['stage']) => {\r\n    try {\r\n      await candidatesService.updateCandidateStage(id, stage);\r\n      setState(prev => ({\r\n        ...prev,\r\n        candidates: prev.candidates.map(candidate =>\r\n          candidate.id === id ? { ...candidate, stage } : candidate\r\n        ),\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to update candidate stage:', error);\r\n      throw error;\r\n    }\r\n  }, []);\r\n\r\n  const updateFilters = useCallback((filters: Partial<CandidatesState['filters']>) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      filters: { ...prev.filters, ...filters },\r\n      pagination: { ...prev.pagination, page: 1 },\r\n    }));\r\n  }, []);\r\n\r\n  return {\r\n    ...state,\r\n    loadCandidates,\r\n    createCandidate,\r\n    updateCandidateStage,\r\n    updateFilters,\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}