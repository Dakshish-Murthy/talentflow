{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dakshish\\\\talentflow\\\\src\\\\components\\\\candidates\\\\KanbanBoard.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { useCandidates } from '../../hooks/useCandidates';\nimport StageColumn from './StageColumn';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KanbanBoard = ({\n  candidates\n}) => {\n  _s();\n  const {\n    updateCandidateStage\n  } = useCandidates();\n  const stages = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\n  const getCandidatesByStage = stage => {\n    return candidates.filter(candidate => candidate.stage === stage);\n  };\n  const onDragEnd = result => {\n    if (!result.destination) return;\n    const sourceStage = result.source.droppableId;\n    const destinationStage = result.destination.droppableId;\n    const candidateId = result.draggableId;\n    if (sourceStage !== destinationStage) {\n      updateCandidateStage(candidateId, destinationStage);\n    }\n  };\n  const getStageLabel = stage => {\n    const labels = {\n      applied: 'Applied',\n      screen: 'Screen',\n      tech: 'Technical',\n      offer: 'Offer',\n      hired: 'Hired',\n      rejected: 'Rejected'\n    };\n    return labels[stage];\n  };\n  const getStageColor = stage => {\n    const colors = {\n      applied: 'bg-blue-500',\n      screen: 'bg-yellow-500',\n      tech: 'bg-purple-500',\n      offer: 'bg-green-500',\n      hired: 'bg-emerald-500',\n      rejected: 'bg-red-500'\n    };\n    return colors[stage];\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex space-x-4 p-4 overflow-x-auto min-h-[600px]\",\n      children: stages.map(stage => /*#__PURE__*/_jsxDEV(StageColumn, {\n        stage: stage,\n        candidates: getCandidatesByStage(stage),\n        stageLabel: getStageLabel(stage),\n        stageColor: getStageColor(stage)\n      }, stage, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(KanbanBoard, \"hJrQcVidzfJJp6VZMlRKu8RxZXU=\", false, function () {\n  return [useCandidates];\n});\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","DragDropContext","useCandidates","StageColumn","jsxDEV","_jsxDEV","KanbanBoard","candidates","_s","updateCandidateStage","stages","getCandidatesByStage","stage","filter","candidate","onDragEnd","result","destination","sourceStage","source","droppableId","destinationStage","candidateId","draggableId","getStageLabel","labels","applied","screen","tech","offer","hired","rejected","getStageColor","colors","children","className","map","stageLabel","stageColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dakshish/talentflow/src/components/candidates/KanbanBoard.tsx"],"sourcesContent":["import React from 'react';\r\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\nimport { Candidate } from '../../types';\r\nimport { useCandidates } from '../../hooks/useCandidates';\r\nimport StageColumn from './StageColumn';\r\n\r\ninterface KanbanBoardProps {\r\n  candidates: Candidate[];\r\n}\r\n\r\nconst KanbanBoard: React.FC<KanbanBoardProps> = ({ candidates }) => {\r\n  const { updateCandidateStage } = useCandidates();\r\n\r\n  const stages: Candidate['stage'][] = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\r\n\r\n  const getCandidatesByStage = (stage: Candidate['stage']) => {\r\n    return candidates.filter(candidate => candidate.stage === stage);\r\n  };\r\n\r\n  const onDragEnd = (result: DropResult) => {\r\n    if (!result.destination) return;\r\n\r\n    const sourceStage = result.source.droppableId as Candidate['stage'];\r\n    const destinationStage = result.destination.droppableId as Candidate['stage'];\r\n    const candidateId = result.draggableId;\r\n\r\n    if (sourceStage !== destinationStage) {\r\n      updateCandidateStage(candidateId, destinationStage);\r\n    }\r\n  };\r\n\r\n  const getStageLabel = (stage: Candidate['stage']) => {\r\n    const labels = {\r\n      applied: 'Applied',\r\n      screen: 'Screen',\r\n      tech: 'Technical',\r\n      offer: 'Offer',\r\n      hired: 'Hired',\r\n      rejected: 'Rejected',\r\n    };\r\n    return labels[stage];\r\n  };\r\n\r\n  const getStageColor = (stage: Candidate['stage']) => {\r\n    const colors = {\r\n      applied: 'bg-blue-500',\r\n      screen: 'bg-yellow-500',\r\n      tech: 'bg-purple-500',\r\n      offer: 'bg-green-500',\r\n      hired: 'bg-emerald-500',\r\n      rejected: 'bg-red-500',\r\n    };\r\n    return colors[stage];\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <div className=\"flex space-x-4 p-4 overflow-x-auto min-h-[600px]\">\r\n        {stages.map((stage) => (\r\n          <StageColumn\r\n            key={stage}\r\n            stage={stage}\r\n            candidates={getCandidatesByStage(stage)}\r\n            stageLabel={getStageLabel(stage)}\r\n            stageColor={getStageColor(stage)}\r\n          />\r\n        ))}\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default KanbanBoard;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,QAA0C,qBAAqB;AAEvF,SAASC,aAAa,QAAQ,2BAA2B;AACzD,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMxC,MAAMC,WAAuC,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAClE,MAAM;IAAEC;EAAqB,CAAC,GAAGP,aAAa,CAAC,CAAC;EAEhD,MAAMQ,MAA4B,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC;EAEhG,MAAMC,oBAAoB,GAAIC,KAAyB,IAAK;IAC1D,OAAOL,UAAU,CAACM,MAAM,CAACC,SAAS,IAAIA,SAAS,CAACF,KAAK,KAAKA,KAAK,CAAC;EAClE,CAAC;EAED,MAAMG,SAAS,GAAIC,MAAkB,IAAK;IACxC,IAAI,CAACA,MAAM,CAACC,WAAW,EAAE;IAEzB,MAAMC,WAAW,GAAGF,MAAM,CAACG,MAAM,CAACC,WAAiC;IACnE,MAAMC,gBAAgB,GAAGL,MAAM,CAACC,WAAW,CAACG,WAAiC;IAC7E,MAAME,WAAW,GAAGN,MAAM,CAACO,WAAW;IAEtC,IAAIL,WAAW,KAAKG,gBAAgB,EAAE;MACpCZ,oBAAoB,CAACa,WAAW,EAAED,gBAAgB,CAAC;IACrD;EACF,CAAC;EAED,MAAMG,aAAa,GAAIZ,KAAyB,IAAK;IACnD,MAAMa,MAAM,GAAG;MACbC,OAAO,EAAE,SAAS;MAClBC,MAAM,EAAE,QAAQ;MAChBC,IAAI,EAAE,WAAW;MACjBC,KAAK,EAAE,OAAO;MACdC,KAAK,EAAE,OAAO;MACdC,QAAQ,EAAE;IACZ,CAAC;IACD,OAAON,MAAM,CAACb,KAAK,CAAC;EACtB,CAAC;EAED,MAAMoB,aAAa,GAAIpB,KAAyB,IAAK;IACnD,MAAMqB,MAAM,GAAG;MACbP,OAAO,EAAE,aAAa;MACtBC,MAAM,EAAE,eAAe;MACvBC,IAAI,EAAE,eAAe;MACrBC,KAAK,EAAE,cAAc;MACrBC,KAAK,EAAE,gBAAgB;MACvBC,QAAQ,EAAE;IACZ,CAAC;IACD,OAAOE,MAAM,CAACrB,KAAK,CAAC;EACtB,CAAC;EAED,oBACEP,OAAA,CAACJ,eAAe;IAACc,SAAS,EAAEA,SAAU;IAAAmB,QAAA,eACpC7B,OAAA;MAAK8B,SAAS,EAAC,kDAAkD;MAAAD,QAAA,EAC9DxB,MAAM,CAAC0B,GAAG,CAAExB,KAAK,iBAChBP,OAAA,CAACF,WAAW;QAEVS,KAAK,EAAEA,KAAM;QACbL,UAAU,EAAEI,oBAAoB,CAACC,KAAK,CAAE;QACxCyB,UAAU,EAAEb,aAAa,CAACZ,KAAK,CAAE;QACjC0B,UAAU,EAAEN,aAAa,CAACpB,KAAK;MAAE,GAJ5BA,KAAK;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKX,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAEtB,CAAC;AAAClC,EAAA,CA5DIF,WAAuC;EAAA,QACVJ,aAAa;AAAA;AAAAyC,EAAA,GAD1CrC,WAAuC;AA8D7C,eAAeA,WAAW;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}