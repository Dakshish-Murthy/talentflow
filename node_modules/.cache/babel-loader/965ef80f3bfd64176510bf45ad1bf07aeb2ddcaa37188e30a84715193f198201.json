{"ast":null,"code":"import Dexie from 'dexie';\nexport class TalentFlowDB extends Dexie {\n  constructor() {\n    super('TalentFlowDB');\n    this.jobs = void 0;\n    this.candidates = void 0;\n    this.assessments = void 0;\n    this.responses = void 0;\n    this.version(3).stores({\n      jobs: 'id, slug, status, order, company, location',\n      candidates: 'id, email, stage, jobId, name, appliedDate',\n      assessments: 'id, jobId, title',\n      responses: 'id, assessmentId, candidateId, submittedAt'\n    });\n  }\n\n  // Helper methods\n  async getJobCandidates(jobId) {\n    return this.candidates.where('jobId').equals(jobId).toArray();\n  }\n  async getCandidateByEmail(email) {\n    return this.candidates.where('email').equals(email).first();\n  }\n  async getActiveJobs() {\n    return this.jobs.where('status').equals('active').sortBy('order');\n  }\n  async getJobsByStatus(status) {\n    return this.jobs.where('status').equals(status).sortBy('order');\n  }\n}\nexport const db = new TalentFlowDB();\n\n// Initialize database on app start\ndb.on('ready', () => {\n  console.log('Database is ready');\n});\ndb.on('error', error => {\n  console.error('Database error:', error);\n});","map":{"version":3,"names":["Dexie","TalentFlowDB","constructor","jobs","candidates","assessments","responses","version","stores","getJobCandidates","jobId","where","equals","toArray","getCandidateByEmail","email","first","getActiveJobs","sortBy","getJobsByStatus","status","db","on","console","log","error"],"sources":["C:/Users/Dakshish/talentflow/src/services/database.ts"],"sourcesContent":["import Dexie, { Table } from 'dexie';\r\nimport { Job, Candidate, Assessment, AssessmentResponse } from '../types';\r\n\r\nexport class TalentFlowDB extends Dexie {\r\n  jobs!: Table<Job, string>;\r\n  candidates!: Table<Candidate, string>;\r\n  assessments!: Table<Assessment, string>;\r\n  responses!: Table<AssessmentResponse, string>;\r\n\r\n  constructor() {\r\n    super('TalentFlowDB');\r\n    this.version(3).stores({\r\n      jobs: 'id, slug, status, order, company, location',\r\n      candidates: 'id, email, stage, jobId, name, appliedDate',\r\n      assessments: 'id, jobId, title',\r\n      responses: 'id, assessmentId, candidateId, submittedAt'\r\n    });\r\n  }\r\n\r\n  // Helper methods\r\n  async getJobCandidates(jobId: string): Promise<Candidate[]> {\r\n    return this.candidates.where('jobId').equals(jobId).toArray();\r\n  }\r\n\r\n  async getCandidateByEmail(email: string): Promise<Candidate | undefined> {\r\n    return this.candidates.where('email').equals(email).first();\r\n  }\r\n\r\n  async getActiveJobs(): Promise<Job[]> {\r\n    return this.jobs.where('status').equals('active').sortBy('order');\r\n  }\r\n\r\n  async getJobsByStatus(status: string): Promise<Job[]> {\r\n    return this.jobs.where('status').equals(status).sortBy('order');\r\n  }\r\n}\r\n\r\nexport const db = new TalentFlowDB();\r\n\r\n// Initialize database on app start\r\ndb.on('ready', () => {\r\n  console.log('Database is ready');\r\n});\r\n\r\ndb.on('error', (error) => {\r\n  console.error('Database error:', error);\r\n});"],"mappings":"AAAA,OAAOA,KAAK,MAAiB,OAAO;AAGpC,OAAO,MAAMC,YAAY,SAASD,KAAK,CAAC;EAMtCE,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,cAAc,CAAC;IAAC,KANxBC,IAAI;IAAA,KACJC,UAAU;IAAA,KACVC,WAAW;IAAA,KACXC,SAAS;IAIP,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC;MACrBL,IAAI,EAAE,4CAA4C;MAClDC,UAAU,EAAE,4CAA4C;MACxDC,WAAW,EAAE,kBAAkB;MAC/BC,SAAS,EAAE;IACb,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMG,gBAAgBA,CAACC,KAAa,EAAwB;IAC1D,OAAO,IAAI,CAACN,UAAU,CAACO,KAAK,CAAC,OAAO,CAAC,CAACC,MAAM,CAACF,KAAK,CAAC,CAACG,OAAO,CAAC,CAAC;EAC/D;EAEA,MAAMC,mBAAmBA,CAACC,KAAa,EAAkC;IACvE,OAAO,IAAI,CAACX,UAAU,CAACO,KAAK,CAAC,OAAO,CAAC,CAACC,MAAM,CAACG,KAAK,CAAC,CAACC,KAAK,CAAC,CAAC;EAC7D;EAEA,MAAMC,aAAaA,CAAA,EAAmB;IACpC,OAAO,IAAI,CAACd,IAAI,CAACQ,KAAK,CAAC,QAAQ,CAAC,CAACC,MAAM,CAAC,QAAQ,CAAC,CAACM,MAAM,CAAC,OAAO,CAAC;EACnE;EAEA,MAAMC,eAAeA,CAACC,MAAc,EAAkB;IACpD,OAAO,IAAI,CAACjB,IAAI,CAACQ,KAAK,CAAC,QAAQ,CAAC,CAACC,MAAM,CAACQ,MAAM,CAAC,CAACF,MAAM,CAAC,OAAO,CAAC;EACjE;AACF;AAEA,OAAO,MAAMG,EAAE,GAAG,IAAIpB,YAAY,CAAC,CAAC;;AAEpC;AACAoB,EAAE,CAACC,EAAE,CAAC,OAAO,EAAE,MAAM;EACnBC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;AAClC,CAAC,CAAC;AAEFH,EAAE,CAACC,EAAE,CAAC,OAAO,EAAGG,KAAK,IAAK;EACxBF,OAAO,CAACE,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;AACzC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}