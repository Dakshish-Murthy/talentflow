{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { useJobs } from './useJobs';\nimport { useAssessments } from './useAssessments';\nexport const useAssessmentsList = () => {\n  _s();\n  const {\n    activeJobs,\n    loadJobs\n  } = useJobs();\n  const {\n    loadAssessment\n  } = useAssessments();\n  const [assessmentsMap, setAssessmentsMap] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [initialized, setInitialized] = useState(false);\n  const initializeAssessments = useCallback(async () => {\n    setLoading(true);\n    try {\n      // Load active jobs if we don't have any\n      let jobsToUse = activeJobs;\n      if (activeJobs.length === 0) {\n        const response = await loadJobs({\n          status: 'active',\n          pageSize: 100\n        });\n        jobsToUse = (response === null || response === void 0 ? void 0 : response.data) || [];\n      }\n\n      // If we still don't have active jobs after loading, exit\n      if (jobsToUse.length === 0) {\n        setLoading(false);\n        setInitialized(true);\n        return;\n      }\n\n      // Load assessments for all active jobs in parallel\n      const assessmentPromises = jobsToUse.map(async job => {\n        try {\n          const result = await loadAssessment(job.id);\n          // The result could be the assessment object or the action payload\n          const assessment = (result === null || result === void 0 ? void 0 : result.payload) || result;\n          return {\n            jobId: job.id,\n            assessment\n          };\n        } catch (error) {\n          console.log(`No assessment found for job ${job.id}`);\n          return {\n            jobId: job.id,\n            assessment: null\n          };\n        }\n      });\n      const results = await Promise.all(assessmentPromises);\n      const newAssessmentsMap = {};\n      results.forEach(result => {\n        if (result.assessment) {\n          newAssessmentsMap[result.jobId] = result.assessment;\n        }\n      });\n      setAssessmentsMap(newAssessmentsMap);\n      setInitialized(true);\n    } catch (error) {\n      console.error('Failed to initialize assessments:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [activeJobs, loadJobs, loadAssessment]);\n  useEffect(() => {\n    if (!initialized) {\n      initializeAssessments();\n    }\n  }, [initializeAssessments, initialized]);\n  const refreshAssessments = useCallback(async () => {\n    setInitialized(false);\n    await initializeAssessments();\n  }, [initializeAssessments]);\n  return {\n    activeJobs,\n    assessmentsMap,\n    loading,\n    refreshAssessments\n  };\n};\n_s(useAssessmentsList, \"fGN/WPYFHEzyvMKmHB53jhdD/og=\", false, function () {\n  return [useJobs, useAssessments];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","useJobs","useAssessments","useAssessmentsList","_s","activeJobs","loadJobs","loadAssessment","assessmentsMap","setAssessmentsMap","loading","setLoading","initialized","setInitialized","initializeAssessments","jobsToUse","length","response","status","pageSize","data","assessmentPromises","map","job","result","id","assessment","payload","jobId","error","console","log","results","Promise","all","newAssessmentsMap","forEach","refreshAssessments"],"sources":["C:/Users/Dakshish/talentflow/src/hooks/useAssessmentsList.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { useJobs } from './useJobs';\r\nimport { useAssessments } from './useAssessments';\r\n\r\nexport const useAssessmentsList = () => {\r\n  const { activeJobs, loadJobs } = useJobs();\r\n  const { loadAssessment } = useAssessments();\r\n  \r\n  const [assessmentsMap, setAssessmentsMap] = useState<Record<string, any>>({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [initialized, setInitialized] = useState(false);\r\n\r\n  const initializeAssessments = useCallback(async () => {\r\n    setLoading(true);\r\n    \r\n    try {\r\n      // Load active jobs if we don't have any\r\n      let jobsToUse = activeJobs;\r\n      if (activeJobs.length === 0) {\r\n        const response = await loadJobs({ status: 'active', pageSize: 100 });\r\n        jobsToUse = response?.data || [];\r\n      }\r\n\r\n      // If we still don't have active jobs after loading, exit\r\n      if (jobsToUse.length === 0) {\r\n        setLoading(false);\r\n        setInitialized(true);\r\n        return;\r\n      }\r\n\r\n      // Load assessments for all active jobs in parallel\r\n      const assessmentPromises = jobsToUse.map(async (job) => {\r\n        try {\r\n          const result = await loadAssessment(job.id);\r\n          // The result could be the assessment object or the action payload\r\n          const assessment = result?.payload || result;\r\n          return { jobId: job.id, assessment };\r\n        } catch (error) {\r\n          console.log(`No assessment found for job ${job.id}`);\r\n          return { jobId: job.id, assessment: null };\r\n        }\r\n      });\r\n\r\n      const results = await Promise.all(assessmentPromises);\r\n      \r\n      const newAssessmentsMap: Record<string, any> = {};\r\n      results.forEach(result => {\r\n        if (result.assessment) {\r\n          newAssessmentsMap[result.jobId] = result.assessment;\r\n        }\r\n      });\r\n      \r\n      setAssessmentsMap(newAssessmentsMap);\r\n      setInitialized(true);\r\n    } catch (error) {\r\n      console.error('Failed to initialize assessments:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [activeJobs, loadJobs, loadAssessment]);\r\n\r\n  useEffect(() => {\r\n    if (!initialized) {\r\n      initializeAssessments();\r\n    }\r\n  }, [initializeAssessments, initialized]);\r\n\r\n  const refreshAssessments = useCallback(async () => {\r\n    setInitialized(false);\r\n    await initializeAssessments();\r\n  }, [initializeAssessments]);\r\n\r\n  return {\r\n    activeJobs,\r\n    assessmentsMap,\r\n    loading,\r\n    refreshAssessments,\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}