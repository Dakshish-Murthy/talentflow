{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { assessmentsService } from '../../services/assessmentsService';\nconst initialState = {\n  currentAssessment: null,\n  loading: false,\n  error: null,\n  previewMode: false\n};\n\n// Async thunks\nexport const fetchAssessment = createAsyncThunk('assessments/fetchAssessment', async jobId => {\n  const response = await assessmentsService.getAssessment(jobId);\n  return response;\n});\nexport const createAssessment = createAsyncThunk('assessments/createAssessment', async ({\n  jobId,\n  assessmentData\n}) => {\n  const response = await assessmentsService.createAssessment(jobId, assessmentData);\n  return response;\n});\nexport const updateAssessment = createAsyncThunk('assessments/updateAssessment', async ({\n  jobId,\n  assessmentData\n}) => {\n  const response = await assessmentsService.updateAssessment(jobId, assessmentData);\n  return response;\n});\nexport const submitResponse = createAsyncThunk('assessments/submitResponse', async ({\n  assessmentId,\n  response\n}) => {\n  const apiResponse = await assessmentsService.submitAssessment(assessmentId, response);\n  return apiResponse;\n});\nconst assessmentsSlice = createSlice({\n  name: 'assessments',\n  initialState,\n  reducers: {\n    setCurrentAssessment: (state, action) => {\n      state.currentAssessment = action.payload;\n    },\n    updateCurrentAssessment: (state, action) => {\n      if (state.currentAssessment) {\n        state.currentAssessment = {\n          ...state.currentAssessment,\n          ...action.payload\n        };\n      }\n    },\n    togglePreviewMode: state => {\n      state.previewMode = !state.previewMode;\n    },\n    clearError: state => {\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Fetch assessment\n    .addCase(fetchAssessment.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchAssessment.fulfilled, (state, action) => {\n      state.loading = false;\n      state.currentAssessment = action.payload;\n    }).addCase(fetchAssessment.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || 'Failed to fetch assessment';\n    })\n    // Create assessment\n    .addCase(createAssessment.fulfilled, (state, action) => {\n      state.currentAssessment = action.payload;\n    }).addCase(createAssessment.rejected, (state, action) => {\n      state.error = action.error.message || 'Failed to create assessment';\n    })\n    // Update assessment\n    .addCase(updateAssessment.fulfilled, (state, action) => {\n      state.currentAssessment = action.payload;\n    }).addCase(updateAssessment.rejected, (state, action) => {\n      state.error = action.error.message || 'Failed to update assessment';\n    });\n  }\n});\nexport const {\n  setCurrentAssessment,\n  updateCurrentAssessment,\n  togglePreviewMode,\n  clearError\n} = assessmentsSlice.actions;\nexport default assessmentsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","assessmentsService","initialState","currentAssessment","loading","error","previewMode","fetchAssessment","jobId","response","getAssessment","createAssessment","assessmentData","updateAssessment","submitResponse","assessmentId","apiResponse","submitAssessment","assessmentsSlice","name","reducers","setCurrentAssessment","state","action","payload","updateCurrentAssessment","togglePreviewMode","clearError","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"sources":["C:/Users/Dakshish/talentflow/src/store/slices/assessmentsSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Assessment, AssessmentResponse } from '../../types';\r\nimport { assessmentsService } from '../../services/assessmentsService';\r\n\r\ninterface AssessmentsState {\r\n  currentAssessment: Assessment | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  previewMode: boolean;\r\n}\r\n\r\nconst initialState: AssessmentsState = {\r\n  currentAssessment: null,\r\n  loading: false,\r\n  error: null,\r\n  previewMode: false,\r\n};\r\n\r\n// Async thunks\r\nexport const fetchAssessment = createAsyncThunk(\r\n  'assessments/fetchAssessment',\r\n  async (jobId: string) => {\r\n    const response = await assessmentsService.getAssessment(jobId);\r\n    return response;\r\n  }\r\n);\r\n\r\nexport const createAssessment = createAsyncThunk(\r\n  'assessments/createAssessment',\r\n  async ({ jobId, assessmentData }: { jobId: string; assessmentData: Partial<Assessment> }) => {\r\n    const response = await assessmentsService.createAssessment(jobId, assessmentData);\r\n    return response;\r\n  }\r\n);\r\n\r\nexport const updateAssessment = createAsyncThunk(\r\n  'assessments/updateAssessment',\r\n  async ({ jobId, assessmentData }: { jobId: string; assessmentData: Partial<Assessment> }) => {\r\n    const response = await assessmentsService.updateAssessment(jobId, assessmentData);\r\n    return response;\r\n  }\r\n);\r\n\r\nexport const submitResponse = createAsyncThunk(\r\n  'assessments/submitResponse',\r\n  async ({ assessmentId, response }: { assessmentId: string; response: any }) => {\r\n    const apiResponse = await assessmentsService.submitAssessment(assessmentId, response);\r\n    return apiResponse;\r\n  }\r\n);\r\n\r\nconst assessmentsSlice = createSlice({\r\n  name: 'assessments',\r\n  initialState,\r\n  reducers: {\r\n    setCurrentAssessment: (state, action: PayloadAction<Assessment | null>) => {\r\n      state.currentAssessment = action.payload;\r\n    },\r\n    updateCurrentAssessment: (state, action: PayloadAction<Partial<Assessment>>) => {\r\n      if (state.currentAssessment) {\r\n        state.currentAssessment = { ...state.currentAssessment, ...action.payload };\r\n      }\r\n    },\r\n    togglePreviewMode: (state) => {\r\n      state.previewMode = !state.previewMode;\r\n    },\r\n    clearError: (state) => {\r\n      state.error = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Fetch assessment\r\n      .addCase(fetchAssessment.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchAssessment.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.currentAssessment = action.payload;\r\n      })\r\n      .addCase(fetchAssessment.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message || 'Failed to fetch assessment';\r\n      })\r\n      // Create assessment\r\n      .addCase(createAssessment.fulfilled, (state, action) => {\r\n        state.currentAssessment = action.payload;\r\n      })\r\n      .addCase(createAssessment.rejected, (state, action) => {\r\n        state.error = action.error.message || 'Failed to create assessment';\r\n      })\r\n      // Update assessment\r\n      .addCase(updateAssessment.fulfilled, (state, action) => {\r\n        state.currentAssessment = action.payload;\r\n      })\r\n      .addCase(updateAssessment.rejected, (state, action) => {\r\n        state.error = action.error.message || 'Failed to update assessment';\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  setCurrentAssessment,\r\n  updateCurrentAssessment,\r\n  togglePreviewMode,\r\n  clearError,\r\n} = assessmentsSlice.actions;\r\n\r\nexport default assessmentsSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAuB,kBAAkB;AAE/E,SAASC,kBAAkB,QAAQ,mCAAmC;AAStE,MAAMC,YAA8B,GAAG;EACrCC,iBAAiB,EAAE,IAAI;EACvBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,WAAW,EAAE;AACf,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGP,gBAAgB,CAC7C,6BAA6B,EAC7B,MAAOQ,KAAa,IAAK;EACvB,MAAMC,QAAQ,GAAG,MAAMR,kBAAkB,CAACS,aAAa,CAACF,KAAK,CAAC;EAC9D,OAAOC,QAAQ;AACjB,CACF,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAGX,gBAAgB,CAC9C,8BAA8B,EAC9B,OAAO;EAAEQ,KAAK;EAAEI;AAAuE,CAAC,KAAK;EAC3F,MAAMH,QAAQ,GAAG,MAAMR,kBAAkB,CAACU,gBAAgB,CAACH,KAAK,EAAEI,cAAc,CAAC;EACjF,OAAOH,QAAQ;AACjB,CACF,CAAC;AAED,OAAO,MAAMI,gBAAgB,GAAGb,gBAAgB,CAC9C,8BAA8B,EAC9B,OAAO;EAAEQ,KAAK;EAAEI;AAAuE,CAAC,KAAK;EAC3F,MAAMH,QAAQ,GAAG,MAAMR,kBAAkB,CAACY,gBAAgB,CAACL,KAAK,EAAEI,cAAc,CAAC;EACjF,OAAOH,QAAQ;AACjB,CACF,CAAC;AAED,OAAO,MAAMK,cAAc,GAAGd,gBAAgB,CAC5C,4BAA4B,EAC5B,OAAO;EAAEe,YAAY;EAAEN;AAAkD,CAAC,KAAK;EAC7E,MAAMO,WAAW,GAAG,MAAMf,kBAAkB,CAACgB,gBAAgB,CAACF,YAAY,EAAEN,QAAQ,CAAC;EACrF,OAAOO,WAAW;AACpB,CACF,CAAC;AAED,MAAME,gBAAgB,GAAGnB,WAAW,CAAC;EACnCoB,IAAI,EAAE,aAAa;EACnBjB,YAAY;EACZkB,QAAQ,EAAE;IACRC,oBAAoB,EAAEA,CAACC,KAAK,EAAEC,MAAwC,KAAK;MACzED,KAAK,CAACnB,iBAAiB,GAAGoB,MAAM,CAACC,OAAO;IAC1C,CAAC;IACDC,uBAAuB,EAAEA,CAACH,KAAK,EAAEC,MAA0C,KAAK;MAC9E,IAAID,KAAK,CAACnB,iBAAiB,EAAE;QAC3BmB,KAAK,CAACnB,iBAAiB,GAAG;UAAE,GAAGmB,KAAK,CAACnB,iBAAiB;UAAE,GAAGoB,MAAM,CAACC;QAAQ,CAAC;MAC7E;IACF,CAAC;IACDE,iBAAiB,EAAGJ,KAAK,IAAK;MAC5BA,KAAK,CAAChB,WAAW,GAAG,CAACgB,KAAK,CAAChB,WAAW;IACxC,CAAC;IACDqB,UAAU,EAAGL,KAAK,IAAK;MACrBA,KAAK,CAACjB,KAAK,GAAG,IAAI;IACpB;EACF,CAAC;EACDuB,aAAa,EAAGC,OAAO,IAAK;IAC1BA;IACE;IAAA,CACCC,OAAO,CAACvB,eAAe,CAACwB,OAAO,EAAGT,KAAK,IAAK;MAC3CA,KAAK,CAAClB,OAAO,GAAG,IAAI;MACpBkB,KAAK,CAACjB,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDyB,OAAO,CAACvB,eAAe,CAACyB,SAAS,EAAE,CAACV,KAAK,EAAEC,MAAM,KAAK;MACrDD,KAAK,CAAClB,OAAO,GAAG,KAAK;MACrBkB,KAAK,CAACnB,iBAAiB,GAAGoB,MAAM,CAACC,OAAO;IAC1C,CAAC,CAAC,CACDM,OAAO,CAACvB,eAAe,CAAC0B,QAAQ,EAAE,CAACX,KAAK,EAAEC,MAAM,KAAK;MACpDD,KAAK,CAAClB,OAAO,GAAG,KAAK;MACrBkB,KAAK,CAACjB,KAAK,GAAGkB,MAAM,CAAClB,KAAK,CAAC6B,OAAO,IAAI,4BAA4B;IACpE,CAAC;IACD;IAAA,CACCJ,OAAO,CAACnB,gBAAgB,CAACqB,SAAS,EAAE,CAACV,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACnB,iBAAiB,GAAGoB,MAAM,CAACC,OAAO;IAC1C,CAAC,CAAC,CACDM,OAAO,CAACnB,gBAAgB,CAACsB,QAAQ,EAAE,CAACX,KAAK,EAAEC,MAAM,KAAK;MACrDD,KAAK,CAACjB,KAAK,GAAGkB,MAAM,CAAClB,KAAK,CAAC6B,OAAO,IAAI,6BAA6B;IACrE,CAAC;IACD;IAAA,CACCJ,OAAO,CAACjB,gBAAgB,CAACmB,SAAS,EAAE,CAACV,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACnB,iBAAiB,GAAGoB,MAAM,CAACC,OAAO;IAC1C,CAAC,CAAC,CACDM,OAAO,CAACjB,gBAAgB,CAACoB,QAAQ,EAAE,CAACX,KAAK,EAAEC,MAAM,KAAK;MACrDD,KAAK,CAACjB,KAAK,GAAGkB,MAAM,CAAClB,KAAK,CAAC6B,OAAO,IAAI,6BAA6B;IACrE,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXb,oBAAoB;EACpBI,uBAAuB;EACvBC,iBAAiB;EACjBC;AACF,CAAC,GAAGT,gBAAgB,CAACiB,OAAO;AAE5B,eAAejB,gBAAgB,CAACkB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}