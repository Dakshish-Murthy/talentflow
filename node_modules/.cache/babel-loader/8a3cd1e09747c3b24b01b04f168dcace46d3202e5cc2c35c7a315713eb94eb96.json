{"ast":null,"code":"import { db } from '../services/database';\nconst jobTitles = ['Senior Frontend Developer', 'Backend Engineer', 'Full Stack Developer', 'DevOps Engineer', 'UX/UI Designer', 'Product Manager', 'Data Scientist', 'Machine Learning Engineer', 'Mobile Developer', 'QA Engineer', 'Technical Lead', 'Software Architect', 'Cloud Engineer', 'Security Analyst', 'Data Engineer', 'Frontend Developer', 'Backend Developer', 'Systems Administrator', 'Database Administrator', 'Network Engineer', 'Scrum Master', 'Business Analyst', 'Technical Writer', 'Support Engineer'];\nconst companies = ['TechCorp', 'InnovateInc', 'DigitalSolutions', 'CloudSystems', 'DataWorks', 'WebCraft', 'AppFactory', 'CodeMasters', 'FutureTech', 'SmartSolutions', 'NextGen', 'AlphaTech', 'BetaSystems', 'GammaLabs', 'DeltaSoft'];\nconst locations = ['New York, NY', 'San Francisco, CA', 'Austin, TX', 'Seattle, WA', 'Boston, MA', 'Denver, CO', 'Chicago, IL', 'Remote', 'Los Angeles, CA', 'Atlanta, GA', 'Miami, FL', 'Portland, OR'];\nconst skills = ['React', 'TypeScript', 'Node.js', 'Python', 'AWS', 'Docker', 'Kubernetes', 'GraphQL', 'MongoDB', 'PostgreSQL', 'Redis', 'Jenkins', 'Terraform', 'Machine Learning', 'UI/UX', 'JavaScript', 'Java', 'C#', 'Go', 'Rust', 'Swift', 'Kotlin', 'Angular', 'Vue.js', 'Svelte', 'Next.js'];\n\n// Generate 1000 unique names\nconst generateNames = count => {\n  const firstNames = ['James', 'Mary', 'John', 'Patricia', 'Robert', 'Jennifer', 'Michael', 'Linda', 'William', 'Elizabeth', 'David', 'Barbara', 'Richard', 'Susan', 'Joseph', 'Jessica', 'Thomas', 'Sarah', 'Charles', 'Karen', 'Christopher', 'Nancy', 'Daniel', 'Lisa', 'Matthew', 'Betty', 'Anthony', 'Margaret', 'Mark', 'Sandra', 'Donald', 'Ashley', 'Steven', 'Kimberly', 'Paul', 'Emily', 'Andrew', 'Donna', 'Joshua', 'Michelle', 'Kenneth', 'Carol', 'Kevin', 'Amanda', 'Brian', 'Melissa', 'George', 'Deborah', 'Timothy', 'Stephanie', 'Ronald', 'Rebecca', 'Jason', 'Laura', 'Edward', 'Helen', 'Jeffrey', 'Sharon', 'Ryan', 'Cynthia', 'Jacob', 'Kathleen', 'Gary', 'Amy', 'Nicholas', 'Shirley', 'Eric', 'Angela', 'Jonathan', 'Anna', 'Stephen', 'Ruth', 'Larry', 'Brenda', 'Justin', 'Pamela', 'Scott', 'Nicole', 'Brandon', 'Katherine', 'Benjamin', 'Samantha', 'Samuel', 'Christine', 'Gregory', 'Catherine', 'Frank', 'Virginia'];\n  const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez', 'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson', 'Thomas', 'Taylor', 'Moore', 'Jackson', 'Martin', 'Lee', 'Perez', 'Thompson', 'White', 'Harris', 'Sanchez', 'Clark', 'Ramirez', 'Lewis', 'Robinson', 'Walker', 'Young', 'Allen', 'King', 'Wright', 'Scott', 'Torres', 'Nguyen', 'Hill', 'Flores', 'Green', 'Adams', 'Nelson', 'Baker', 'Hall', 'Rivera', 'Campbell', 'Mitchell', 'Carter', 'Roberts', 'Gomez', 'Phillips', 'Evans', 'Turner', 'Diaz', 'Parker', 'Cruz', 'Edwards', 'Collins', 'Reyes', 'Stewart', 'Morris', 'Morales', 'Murphy', 'Cook', 'Rogers', 'Gutierrez', 'Ortiz', 'Morgan', 'Cooper', 'Peterson', 'Bailey', 'Reed', 'Kelly', 'Howard', 'Ramos', 'Kim', 'Cox', 'Ward', 'Richardson', 'Watson', 'Brooks', 'Chavez', 'Wood', 'James', 'Bennett', 'Gray', 'Mendoza', 'Ruiz', 'Hughes'];\n  const names = new Set();\n  while (names.size < count) {\n    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\n    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\n    names.add(`${firstName} ${lastName}`);\n  }\n  return Array.from(names);\n};\nconst generateEmail = name => {\n  return name.toLowerCase().replace(' ', '.') + '@example.com';\n};\nexport const seedDatabase = async () => {\n  try {\n    // Clear existing data\n    await Promise.all([db.jobs.clear(), db.candidates.clear(), db.assessments.clear(), db.responses.clear()]);\n\n    // Generate jobs\n    const jobs = [];\n    for (let i = 0; i < 25; i++) {\n      const title = jobTitles[Math.floor(Math.random() * jobTitles.length)];\n      const company = companies[Math.floor(Math.random() * companies.length)];\n      const location = locations[Math.floor(Math.random() * locations.length)];\n\n      // Generate unique tags\n      const tagSet = new Set();\n      while (tagSet.size < 4) {\n        tagSet.add(skills[Math.floor(Math.random() * skills.length)]);\n      }\n      const salaryRanges = ['$80,000 - $110,000', '$90,000 - $120,000', '$100,000 - $130,000', '$110,000 - $140,000', '$120,000 - $150,000', '$130,000 - $160,000'];\n      const job = {\n        id: `job-${i + 1}`,\n        title: title,\n        slug: `${title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '')}-${i + 1}`,\n        status: Math.random() > 0.3 ? 'active' : 'archived',\n        tags: Array.from(tagSet),\n        order: i + 1,\n        description: `We are looking for a skilled ${title} to join our team at ${company}. This position offers competitive compensation, excellent benefits, and opportunities for professional growth. The ideal candidate will have strong technical skills and a passion for innovation.`,\n        salary: salaryRanges[Math.floor(Math.random() * salaryRanges.length)],\n        location,\n        company,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      jobs.push(job);\n    }\n\n    // Generate candidates\n    const candidates = [];\n    const stages = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\n    const names = generateNames(1000);\n    for (let i = 0; i < 1000; i++) {\n      const name = names[i];\n      const job = jobs[Math.floor(Math.random() * jobs.length)];\n\n      // Generate realistic skills based on job\n      const jobSkills = job.tags || [];\n      const candidateSkills = [...jobSkills].sort(() => 0.5 - Math.random()).slice(0, Math.floor(Math.random() * 3) + 2);\n      const candidate = {\n        id: `candidate-${i + 1}`,\n        name,\n        email: generateEmail(name),\n        phone: `+1-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`,\n        stage: stages[Math.floor(Math.random() * stages.length)],\n        jobId: job.id,\n        jobTitle: job.title,\n        appliedDate: new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000),\n        // Within last 90 days\n        location: locations[Math.floor(Math.random() * locations.length)],\n        experience: `${Math.floor(Math.random() * 15) + 1} years`,\n        skills: candidateSkills,\n        notes: Math.random() > 0.7 ? [{\n          id: `note-${i}`,\n          author: 'Recruiter',\n          content: 'Strong technical background. Good cultural fit.',\n          timestamp: new Date(),\n          mentions: []\n        }] : []\n      };\n      candidates.push(candidate);\n    }\n\n    // Generate assessments\n    const assessments = [];\n    const questionTypes = ['single-choice', 'multi-choice', 'short-text', 'long-text', 'numeric'];\n    for (let i = 0; i < 3; i++) {\n      const job = jobs[i];\n      const sections = [];\n      for (let s = 0; s < 2; s++) {\n        const questions = [];\n        for (let q = 0; q < 5; q++) {\n          var _job$tags, _job$tags2, _job$tags3, _job$tags4;\n          const questionTypesMap = {\n            'single-choice': {\n              question: `What is the main advantage of using ${((_job$tags = job.tags) === null || _job$tags === void 0 ? void 0 : _job$tags[0]) || 'React'} in modern web development?`,\n              options: ['Better performance', 'Improved developer experience', 'Enhanced security', 'All of the above'],\n              correctAnswer: 'Improved developer experience'\n            },\n            'multi-choice': {\n              question: `Which of the following are key features of ${((_job$tags2 = job.tags) === null || _job$tags2 === void 0 ? void 0 : _job$tags2[1]) || 'TypeScript'}?`,\n              options: ['Static typing', 'Interface support', 'Compilation to JavaScript', 'Built-in testing framework'],\n              correctAnswer: ['Static typing', 'Interface support', 'Compilation to JavaScript']\n            },\n            'short-text': {\n              question: `Explain how you would implement a feature using ${((_job$tags3 = job.tags) === null || _job$tags3 === void 0 ? void 0 : _job$tags3[2]) || 'Node.js'}`,\n              maxLength: 200\n            },\n            'long-text': {\n              question: `Describe your experience with ${((_job$tags4 = job.tags) === null || _job$tags4 === void 0 ? void 0 : _job$tags4[0]) || 'cloud technologies'} and how you've used them in previous projects.`,\n              maxLength: 1000\n            },\n            'numeric': {\n              question: 'How many years of professional experience do you have with this technology?',\n              min: 0,\n              max: 20\n            }\n          };\n          const type = questionTypes[Math.floor(Math.random() * questionTypes.length)];\n          const questionData = questionTypesMap[type];\n          questions.push({\n            id: `q-${i}-${s}-${q}`,\n            type,\n            question: questionData.question,\n            required: Math.random() > 0.3,\n            options: questionData.options,\n            correctAnswer: questionData.correctAnswer,\n            maxLength: questionData.maxLength,\n            min: questionData.min,\n            max: questionData.max\n          });\n        }\n        sections.push({\n          id: `section-${i}-${s}`,\n          title: s === 0 ? 'Technical Knowledge' : 'Practical Experience',\n          description: s === 0 ? 'Test your understanding of core concepts' : 'Share your hands-on experience',\n          questions\n        });\n      }\n      assessments.push({\n        id: `assessment-${i + 1}`,\n        jobId: job.id,\n        title: `Technical Assessment - ${job.title}`,\n        description: `This assessment will evaluate your technical skills and experience relevant to the ${job.title} position at ${job.company}. Please answer all questions to the best of your ability.`,\n        sections,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n    }\n\n    // Add to database in transaction\n    await db.transaction('rw', db.jobs, db.candidates, db.assessments, async () => {\n      await db.jobs.bulkAdd(jobs);\n      await db.candidates.bulkAdd(candidates);\n      await db.assessments.bulkAdd(assessments);\n    });\n    console.log('Database seeded successfully with:', {\n      jobs: jobs.length,\n      candidates: candidates.length,\n      assessments: assessments.length\n    });\n    return {\n      jobs,\n      candidates,\n      assessments\n    };\n  } catch (error) {\n    console.error('Error seeding database:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["db","jobTitles","companies","locations","skills","generateNames","count","firstNames","lastNames","names","Set","size","firstName","Math","floor","random","length","lastName","add","Array","from","generateEmail","name","toLowerCase","replace","seedDatabase","Promise","all","jobs","clear","candidates","assessments","responses","i","title","company","location","tagSet","salaryRanges","job","id","slug","status","tags","order","description","salary","createdAt","Date","updatedAt","push","stages","jobSkills","candidateSkills","sort","slice","candidate","email","phone","stage","jobId","jobTitle","appliedDate","now","experience","notes","author","content","timestamp","mentions","questionTypes","sections","s","questions","q","_job$tags","_job$tags2","_job$tags3","_job$tags4","questionTypesMap","question","options","correctAnswer","maxLength","min","max","type","questionData","required","transaction","bulkAdd","console","log","error"],"sources":["C:/Users/Dakshish/talentflow/src/data/seed.ts"],"sourcesContent":["import { Job, Candidate, Assessment } from '../types';\r\nimport { db } from '../services/database';\r\n\r\nconst jobTitles = [\r\n  'Senior Frontend Developer', 'Backend Engineer', 'Full Stack Developer',\r\n  'DevOps Engineer', 'UX/UI Designer', 'Product Manager',\r\n  'Data Scientist', 'Machine Learning Engineer', 'Mobile Developer',\r\n  'QA Engineer', 'Technical Lead', 'Software Architect',\r\n  'Cloud Engineer', 'Security Analyst', 'Data Engineer',\r\n  'Frontend Developer', 'Backend Developer', 'Systems Administrator',\r\n  'Database Administrator', 'Network Engineer', 'Scrum Master',\r\n  'Business Analyst', 'Technical Writer', 'Support Engineer'\r\n];\r\n\r\nconst companies = [\r\n  'TechCorp', 'InnovateInc', 'DigitalSolutions', 'CloudSystems',\r\n  'DataWorks', 'WebCraft', 'AppFactory', 'CodeMasters',\r\n  'FutureTech', 'SmartSolutions', 'NextGen', 'AlphaTech',\r\n  'BetaSystems', 'GammaLabs', 'DeltaSoft'\r\n];\r\n\r\nconst locations = [\r\n  'New York, NY', 'San Francisco, CA', 'Austin, TX', 'Seattle, WA',\r\n  'Boston, MA', 'Denver, CO', 'Chicago, IL', 'Remote',\r\n  'Los Angeles, CA', 'Atlanta, GA', 'Miami, FL', 'Portland, OR'\r\n];\r\n\r\nconst skills = [\r\n  'React', 'TypeScript', 'Node.js', 'Python', 'AWS', 'Docker',\r\n  'Kubernetes', 'GraphQL', 'MongoDB', 'PostgreSQL', 'Redis',\r\n  'Jenkins', 'Terraform', 'Machine Learning', 'UI/UX',\r\n  'JavaScript', 'Java', 'C#', 'Go', 'Rust', 'Swift',\r\n  'Kotlin', 'Angular', 'Vue.js', 'Svelte', 'Next.js'\r\n];\r\n\r\n// Generate 1000 unique names\r\nconst generateNames = (count: number) => {\r\n  const firstNames = [\r\n    'James', 'Mary', 'John', 'Patricia', 'Robert', 'Jennifer', 'Michael', 'Linda',\r\n    'William', 'Elizabeth', 'David', 'Barbara', 'Richard', 'Susan', 'Joseph', 'Jessica',\r\n    'Thomas', 'Sarah', 'Charles', 'Karen', 'Christopher', 'Nancy', 'Daniel', 'Lisa',\r\n    'Matthew', 'Betty', 'Anthony', 'Margaret', 'Mark', 'Sandra', 'Donald', 'Ashley',\r\n    'Steven', 'Kimberly', 'Paul', 'Emily', 'Andrew', 'Donna', 'Joshua', 'Michelle',\r\n    'Kenneth', 'Carol', 'Kevin', 'Amanda', 'Brian', 'Melissa', 'George', 'Deborah',\r\n    'Timothy', 'Stephanie', 'Ronald', 'Rebecca', 'Jason', 'Laura', 'Edward', 'Helen',\r\n    'Jeffrey', 'Sharon', 'Ryan', 'Cynthia', 'Jacob', 'Kathleen', 'Gary', 'Amy',\r\n    'Nicholas', 'Shirley', 'Eric', 'Angela', 'Jonathan', 'Anna', 'Stephen', 'Ruth',\r\n    'Larry', 'Brenda', 'Justin', 'Pamela', 'Scott', 'Nicole', 'Brandon', 'Katherine',\r\n    'Benjamin', 'Samantha', 'Samuel', 'Christine', 'Gregory', 'Catherine', 'Frank', 'Virginia'\r\n  ];\r\n  \r\n  const lastNames = [\r\n    'Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis',\r\n    'Rodriguez', 'Martinez', 'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson',\r\n    'Thomas', 'Taylor', 'Moore', 'Jackson', 'Martin', 'Lee', 'Perez', 'Thompson',\r\n    'White', 'Harris', 'Sanchez', 'Clark', 'Ramirez', 'Lewis', 'Robinson', 'Walker',\r\n    'Young', 'Allen', 'King', 'Wright', 'Scott', 'Torres', 'Nguyen', 'Hill', 'Flores',\r\n    'Green', 'Adams', 'Nelson', 'Baker', 'Hall', 'Rivera', 'Campbell', 'Mitchell',\r\n    'Carter', 'Roberts', 'Gomez', 'Phillips', 'Evans', 'Turner', 'Diaz', 'Parker',\r\n    'Cruz', 'Edwards', 'Collins', 'Reyes', 'Stewart', 'Morris', 'Morales', 'Murphy',\r\n    'Cook', 'Rogers', 'Gutierrez', 'Ortiz', 'Morgan', 'Cooper', 'Peterson', 'Bailey',\r\n    'Reed', 'Kelly', 'Howard', 'Ramos', 'Kim', 'Cox', 'Ward', 'Richardson', 'Watson',\r\n    'Brooks', 'Chavez', 'Wood', 'James', 'Bennett', 'Gray', 'Mendoza', 'Ruiz', 'Hughes'\r\n  ];\r\n  \r\n  const names = new Set<string>();\r\n  while (names.size < count) {\r\n    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r\n    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r\n    names.add(`${firstName} ${lastName}`);\r\n  }\r\n  return Array.from(names);\r\n};\r\n\r\nconst generateEmail = (name: string) => {\r\n  return name.toLowerCase().replace(' ', '.') + '@example.com';\r\n};\r\n\r\nexport const seedDatabase = async () => {\r\n  try {\r\n    // Clear existing data\r\n    await Promise.all([\r\n      db.jobs.clear(),\r\n      db.candidates.clear(),\r\n      db.assessments.clear(),\r\n      db.responses.clear()\r\n    ]);\r\n\r\n    // Generate jobs\r\n    const jobs: Job[] = [];\r\n    for (let i = 0; i < 25; i++) {\r\n      const title = jobTitles[Math.floor(Math.random() * jobTitles.length)];\r\n      const company = companies[Math.floor(Math.random() * companies.length)];\r\n      const location = locations[Math.floor(Math.random() * locations.length)];\r\n      \r\n      // Generate unique tags\r\n      const tagSet = new Set<string>();\r\n      while (tagSet.size < 4) {\r\n        tagSet.add(skills[Math.floor(Math.random() * skills.length)]);\r\n      }\r\n      \r\n      const salaryRanges = [\r\n        '$80,000 - $110,000', '$90,000 - $120,000', '$100,000 - $130,000',\r\n        '$110,000 - $140,000', '$120,000 - $150,000', '$130,000 - $160,000'\r\n      ];\r\n      \r\n      const job: Job = {\r\n        id: `job-${i + 1}`,\r\n        title: title,\r\n        slug: `${title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '')}-${i + 1}`,\r\n        status: Math.random() > 0.3 ? 'active' : 'archived',\r\n        tags: Array.from(tagSet),\r\n        order: i + 1,\r\n        description: `We are looking for a skilled ${title} to join our team at ${company}. This position offers competitive compensation, excellent benefits, and opportunities for professional growth. The ideal candidate will have strong technical skills and a passion for innovation.`,\r\n        salary: salaryRanges[Math.floor(Math.random() * salaryRanges.length)],\r\n        location,\r\n        company,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      };\r\n      jobs.push(job);\r\n    }\r\n\r\n    // Generate candidates\r\n    const candidates: Candidate[] = [];\r\n    const stages: Candidate['stage'][] = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\r\n    const names = generateNames(1000);\r\n    \r\n    for (let i = 0; i < 1000; i++) {\r\n      const name = names[i];\r\n      const job = jobs[Math.floor(Math.random() * jobs.length)];\r\n      \r\n      // Generate realistic skills based on job\r\n      const jobSkills = job.tags || [];\r\n      const candidateSkills = [...jobSkills]\r\n        .sort(() => 0.5 - Math.random())\r\n        .slice(0, Math.floor(Math.random() * 3) + 2);\r\n      \r\n      const candidate: Candidate = {\r\n        id: `candidate-${i + 1}`,\r\n        name,\r\n        email: generateEmail(name),\r\n        phone: `+1-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`,\r\n        stage: stages[Math.floor(Math.random() * stages.length)],\r\n        jobId: job.id,\r\n        jobTitle: job.title,\r\n        appliedDate: new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000), // Within last 90 days\r\n        location: locations[Math.floor(Math.random() * locations.length)],\r\n        experience: `${Math.floor(Math.random() * 15) + 1} years`,\r\n        skills: candidateSkills,\r\n        notes: Math.random() > 0.7 ? [{\r\n          id: `note-${i}`,\r\n          author: 'Recruiter',\r\n          content: 'Strong technical background. Good cultural fit.',\r\n          timestamp: new Date(),\r\n          mentions: []\r\n        }] : []\r\n      };\r\n      candidates.push(candidate);\r\n    }\r\n\r\n    // Generate assessments\r\n    const assessments: Assessment[] = [];\r\n    const questionTypes: any[] = ['single-choice', 'multi-choice', 'short-text', 'long-text', 'numeric'];\r\n    \r\n    for (let i = 0; i < 3; i++) {\r\n      const job = jobs[i];\r\n      const sections = [];\r\n      \r\n      for (let s = 0; s < 2; s++) {\r\n        const questions = [];\r\n        for (let q = 0; q < 5; q++) {\r\n          const questionTypesMap: any = {\r\n            'single-choice': {\r\n              question: `What is the main advantage of using ${job.tags?.[0] || 'React'} in modern web development?`,\r\n              options: ['Better performance', 'Improved developer experience', 'Enhanced security', 'All of the above'],\r\n              correctAnswer: 'Improved developer experience'\r\n            },\r\n            'multi-choice': {\r\n              question: `Which of the following are key features of ${job.tags?.[1] || 'TypeScript'}?`,\r\n              options: ['Static typing', 'Interface support', 'Compilation to JavaScript', 'Built-in testing framework'],\r\n              correctAnswer: ['Static typing', 'Interface support', 'Compilation to JavaScript']\r\n            },\r\n            'short-text': {\r\n              question: `Explain how you would implement a feature using ${job.tags?.[2] || 'Node.js'}`,\r\n              maxLength: 200\r\n            },\r\n            'long-text': {\r\n              question: `Describe your experience with ${job.tags?.[0] || 'cloud technologies'} and how you've used them in previous projects.`,\r\n              maxLength: 1000\r\n            },\r\n            'numeric': {\r\n              question: 'How many years of professional experience do you have with this technology?',\r\n              min: 0,\r\n              max: 20\r\n            }\r\n          };\r\n          \r\n          const type = questionTypes[Math.floor(Math.random() * questionTypes.length)];\r\n          const questionData = questionTypesMap[type];\r\n          \r\n          questions.push({\r\n            id: `q-${i}-${s}-${q}`,\r\n            type,\r\n            question: questionData.question,\r\n            required: Math.random() > 0.3,\r\n            options: questionData.options,\r\n            correctAnswer: questionData.correctAnswer,\r\n            maxLength: questionData.maxLength,\r\n            min: questionData.min,\r\n            max: questionData.max\r\n          });\r\n        }\r\n        sections.push({\r\n          id: `section-${i}-${s}`,\r\n          title: s === 0 ? 'Technical Knowledge' : 'Practical Experience',\r\n          description: s === 0 ? 'Test your understanding of core concepts' : 'Share your hands-on experience',\r\n          questions\r\n        });\r\n      }\r\n      \r\n      assessments.push({\r\n        id: `assessment-${i + 1}`,\r\n        jobId: job.id,\r\n        title: `Technical Assessment - ${job.title}`,\r\n        description: `This assessment will evaluate your technical skills and experience relevant to the ${job.title} position at ${job.company}. Please answer all questions to the best of your ability.`,\r\n        sections,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      });\r\n    }\r\n\r\n    // Add to database in transaction\r\n    await db.transaction('rw', db.jobs, db.candidates, db.assessments, async () => {\r\n      await db.jobs.bulkAdd(jobs);\r\n      await db.candidates.bulkAdd(candidates);\r\n      await db.assessments.bulkAdd(assessments);\r\n    });\r\n\r\n    console.log('Database seeded successfully with:', {\r\n      jobs: jobs.length,\r\n      candidates: candidates.length,\r\n      assessments: assessments.length\r\n    });\r\n    \r\n    return {\r\n      jobs,\r\n      candidates,\r\n      assessments\r\n    };\r\n  } catch (error) {\r\n    console.error('Error seeding database:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}