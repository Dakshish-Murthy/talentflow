{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dakshish\\\\talentflow\\\\src\\\\components\\\\assessments\\\\ConditionalLogic.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConditionalLogic = ({\n  question,\n  onUpdate,\n  allQuestions\n}) => {\n  var _question$conditional, _question$conditional2, _question$conditional3, _question$conditional4, _question$conditional5, _availableQuestions$f, _availableQuestions$f2;\n  // Filter out current question and questions that don't have options\n  const availableQuestions = allQuestions.filter(q => q.id !== question.id && q.options && q.options.length > 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"border border-gray-200 rounded-lg p-4 bg-gray-50\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"text-sm font-medium text-gray-700 mb-3\",\n      children: \"Conditional Logic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-3 gap-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: ((_question$conditional = question.conditionalLogic) === null || _question$conditional === void 0 ? void 0 : _question$conditional.dependsOn) || '',\n          onChange: e => onUpdate({\n            conditionalLogic: e.target.value ? {\n              dependsOn: e.target.value,\n              condition: 'equals',\n              value: ''\n            } : undefined\n          }),\n          className: \"col-span-2 border border-gray-300 rounded-md shadow-sm px-2 py-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Show this question if...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), availableQuestions.map(q => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: q.id,\n            children: [q.question.substring(0, 50), \"...\"]\n          }, q.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: ((_question$conditional2 = question.conditionalLogic) === null || _question$conditional2 === void 0 ? void 0 : _question$conditional2.condition) || '',\n          onChange: e => onUpdate({\n            conditionalLogic: question.conditionalLogic ? {\n              ...question.conditionalLogic,\n              condition: e.target.value\n            } : undefined\n          }),\n          disabled: !((_question$conditional3 = question.conditionalLogic) !== null && _question$conditional3 !== void 0 && _question$conditional3.dependsOn),\n          className: \"border border-gray-300 rounded-md shadow-sm px-2 py-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"equals\",\n            children: \"Equals\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"not-equals\",\n            children: \"Not Equals\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"contains\",\n            children: \"Contains\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), ((_question$conditional4 = question.conditionalLogic) === null || _question$conditional4 === void 0 ? void 0 : _question$conditional4.dependsOn) && /*#__PURE__*/_jsxDEV(\"select\", {\n        value: ((_question$conditional5 = question.conditionalLogic) === null || _question$conditional5 === void 0 ? void 0 : _question$conditional5.value) || '',\n        onChange: e => onUpdate({\n          conditionalLogic: question.conditionalLogic ? {\n            ...question.conditionalLogic,\n            value: e.target.value\n          } : undefined\n        }),\n        className: \"w-full border border-gray-300 rounded-md shadow-sm px-2 py-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select value...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), (_availableQuestions$f = availableQuestions.find(q => {\n          var _question$conditional6;\n          return q.id === ((_question$conditional6 = question.conditionalLogic) === null || _question$conditional6 === void 0 ? void 0 : _question$conditional6.dependsOn);\n        })) === null || _availableQuestions$f === void 0 ? void 0 : (_availableQuestions$f2 = _availableQuestions$f.options) === null || _availableQuestions$f2 === void 0 ? void 0 : _availableQuestions$f2.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option,\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_c = ConditionalLogic;\nexport default ConditionalLogic;\nvar _c;\n$RefreshReg$(_c, \"ConditionalLogic\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ConditionalLogic","question","onUpdate","allQuestions","_question$conditional","_question$conditional2","_question$conditional3","_question$conditional4","_question$conditional5","_availableQuestions$f","_availableQuestions$f2","availableQuestions","filter","q","id","options","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","conditionalLogic","dependsOn","onChange","e","target","condition","undefined","map","substring","disabled","find","_question$conditional6","option","index","_c","$RefreshReg$"],"sources":["C:/Users/Dakshish/talentflow/src/components/assessments/ConditionalLogic.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Question } from '../../types';\r\n\r\ninterface ConditionalLogicProps {\r\n  question: Question;\r\n  onUpdate: (updates: Partial<Question>) => void;\r\n  allQuestions: Question[];\r\n}\r\n\r\nconst ConditionalLogic: React.FC<ConditionalLogicProps> = ({ \r\n  question, \r\n  onUpdate, \r\n  allQuestions \r\n}) => {\r\n  // Filter out current question and questions that don't have options\r\n  const availableQuestions = allQuestions.filter(\r\n    q => q.id !== question.id && q.options && q.options.length > 0\r\n  );\r\n\r\n  return (\r\n    <div className=\"border border-gray-200 rounded-lg p-4 bg-gray-50\">\r\n      <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Conditional Logic</h4>\r\n      \r\n      <div className=\"space-y-3\">\r\n        <div className=\"grid grid-cols-3 gap-3\">\r\n          <select\r\n            value={question.conditionalLogic?.dependsOn || ''}\r\n            onChange={(e) => onUpdate({\r\n              conditionalLogic: e.target.value ? {\r\n                dependsOn: e.target.value,\r\n                condition: 'equals',\r\n                value: '',\r\n              } : undefined\r\n            })}\r\n            className=\"col-span-2 border border-gray-300 rounded-md shadow-sm px-2 py-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\r\n          >\r\n            <option value=\"\">Show this question if...</option>\r\n            {availableQuestions.map((q) => (\r\n              <option key={q.id} value={q.id}>\r\n                {q.question.substring(0, 50)}...\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          <select\r\n            value={question.conditionalLogic?.condition || ''}\r\n            onChange={(e) => onUpdate({\r\n              conditionalLogic: question.conditionalLogic ? {\r\n                ...question.conditionalLogic,\r\n                condition: e.target.value as any,\r\n              } : undefined\r\n            })}\r\n            disabled={!question.conditionalLogic?.dependsOn}\r\n            className=\"border border-gray-300 rounded-md shadow-sm px-2 py-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\r\n          >\r\n            <option value=\"equals\">Equals</option>\r\n            <option value=\"not-equals\">Not Equals</option>\r\n            <option value=\"contains\">Contains</option>\r\n          </select>\r\n        </div>\r\n\r\n        {question.conditionalLogic?.dependsOn && (\r\n          <select\r\n            value={question.conditionalLogic?.value || ''}\r\n            onChange={(e) => onUpdate({\r\n              conditionalLogic: question.conditionalLogic ? {\r\n                ...question.conditionalLogic,\r\n                value: e.target.value,\r\n              } : undefined\r\n            })}\r\n            className=\"w-full border border-gray-300 rounded-md shadow-sm px-2 py-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\r\n          >\r\n            <option value=\"\">Select value...</option>\r\n            {availableQuestions\r\n              .find(q => q.id === question.conditionalLogic?.dependsOn)\r\n              ?.options?.map((option, index) => (\r\n                <option key={index} value={option}>\r\n                  {option}\r\n                </option>\r\n              ))}\r\n          </select>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConditionalLogic;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}