{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { useAppDispatch, useAppSelector } from './redux';\nimport { fetchJobs, createJob, updateJob, reorderJobs, setCurrentJob, clearError } from '../store/slices/jobsSlice';\nexport const useJobs = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  const {\n    jobs,\n    currentJob,\n    loading,\n    error\n  } = useAppSelector(state => state.jobs);\n  const loadJobs = useCallback(params => {\n    return dispatch(fetchJobs(params));\n  }, [dispatch]);\n  const createNewJob = useCallback(jobData => {\n    return dispatch(createJob(jobData));\n  }, [dispatch]);\n  const updateExistingJob = useCallback((id, updates) => {\n    return dispatch(updateJob({\n      id,\n      updates\n    }));\n  }, [dispatch]);\n  const handleReorderJobs = useCallback((fromOrder, toOrder) => {\n    return dispatch(reorderJobs({\n      fromOrder,\n      toOrder\n    }));\n  }, [dispatch]);\n  const handleSetCurrentJob = useCallback(job => {\n    dispatch(setCurrentJob(job));\n  }, [dispatch]);\n  const handleClearError = useCallback(() => {\n    dispatch(clearError());\n  }, [dispatch]);\n  return {\n    // State\n    jobs,\n    currentJob,\n    loading,\n    error,\n    // Actions\n    loadJobs,\n    createNewJob,\n    updateExistingJob,\n    handleReorderJobs,\n    setCurrentJob: handleSetCurrentJob,\n    clearError: handleClearError\n  };\n};\n_s(useJobs, \"vhN9hyM8HfQr+i0CBJWxs9/YZ7E=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});","map":{"version":3,"names":["useCallback","useAppDispatch","useAppSelector","fetchJobs","createJob","updateJob","reorderJobs","setCurrentJob","clearError","useJobs","_s","dispatch","jobs","currentJob","loading","error","state","loadJobs","params","createNewJob","jobData","updateExistingJob","id","updates","handleReorderJobs","fromOrder","toOrder","handleSetCurrentJob","job","handleClearError"],"sources":["C:/Users/Dakshish/talentflow/src/hooks/useJobs.ts"],"sourcesContent":["import { useCallback } from 'react';\r\nimport { useAppDispatch, useAppSelector } from './redux';\r\nimport {\r\n  fetchJobs,\r\n  createJob,\r\n  updateJob,\r\n  reorderJobs,\r\n  setCurrentJob,\r\n  clearError,\r\n} from '../store/slices/jobsSlice';\r\n\r\nexport const useJobs = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { jobs, currentJob, loading, error } = useAppSelector((state) => state.jobs);\r\n\r\n  const loadJobs = useCallback((params?: any) => {\r\n    return dispatch(fetchJobs(params));\r\n  }, [dispatch]);\r\n\r\n  const createNewJob = useCallback((jobData: any) => {\r\n    return dispatch(createJob(jobData));\r\n  }, [dispatch]);\r\n\r\n  const updateExistingJob = useCallback((id: string, updates: any) => {\r\n    return dispatch(updateJob({ id, updates }));\r\n  }, [dispatch]);\r\n\r\n  const handleReorderJobs = useCallback((fromOrder: number, toOrder: number) => {\r\n    return dispatch(reorderJobs({ fromOrder, toOrder }));\r\n  }, [dispatch]);\r\n\r\n  const handleSetCurrentJob = useCallback((job: any) => {\r\n    dispatch(setCurrentJob(job));\r\n  }, [dispatch]);\r\n\r\n  const handleClearError = useCallback(() => {\r\n    dispatch(clearError());\r\n  }, [dispatch]);\r\n\r\n  return {\r\n    // State\r\n    jobs,\r\n    currentJob,\r\n    loading,\r\n    error,\r\n    \r\n    // Actions\r\n    loadJobs,\r\n    createNewJob,\r\n    updateExistingJob,\r\n    handleReorderJobs,\r\n    setCurrentJob: handleSetCurrentJob,\r\n    clearError: handleClearError,\r\n  };\r\n};"],"mappings":";AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,cAAc,EAAEC,cAAc,QAAQ,SAAS;AACxD,SACEC,SAAS,EACTC,SAAS,EACTC,SAAS,EACTC,WAAW,EACXC,aAAa,EACbC,UAAU,QACL,2BAA2B;AAElC,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,QAAQ,GAAGV,cAAc,CAAC,CAAC;EACjC,MAAM;IAAEW,IAAI;IAAEC,UAAU;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGb,cAAc,CAAEc,KAAK,IAAKA,KAAK,CAACJ,IAAI,CAAC;EAElF,MAAMK,QAAQ,GAAGjB,WAAW,CAAEkB,MAAY,IAAK;IAC7C,OAAOP,QAAQ,CAACR,SAAS,CAACe,MAAM,CAAC,CAAC;EACpC,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;EAEd,MAAMQ,YAAY,GAAGnB,WAAW,CAAEoB,OAAY,IAAK;IACjD,OAAOT,QAAQ,CAACP,SAAS,CAACgB,OAAO,CAAC,CAAC;EACrC,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;EAEd,MAAMU,iBAAiB,GAAGrB,WAAW,CAAC,CAACsB,EAAU,EAAEC,OAAY,KAAK;IAClE,OAAOZ,QAAQ,CAACN,SAAS,CAAC;MAAEiB,EAAE;MAAEC;IAAQ,CAAC,CAAC,CAAC;EAC7C,CAAC,EAAE,CAACZ,QAAQ,CAAC,CAAC;EAEd,MAAMa,iBAAiB,GAAGxB,WAAW,CAAC,CAACyB,SAAiB,EAAEC,OAAe,KAAK;IAC5E,OAAOf,QAAQ,CAACL,WAAW,CAAC;MAAEmB,SAAS;MAAEC;IAAQ,CAAC,CAAC,CAAC;EACtD,CAAC,EAAE,CAACf,QAAQ,CAAC,CAAC;EAEd,MAAMgB,mBAAmB,GAAG3B,WAAW,CAAE4B,GAAQ,IAAK;IACpDjB,QAAQ,CAACJ,aAAa,CAACqB,GAAG,CAAC,CAAC;EAC9B,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EAEd,MAAMkB,gBAAgB,GAAG7B,WAAW,CAAC,MAAM;IACzCW,QAAQ,CAACH,UAAU,CAAC,CAAC,CAAC;EACxB,CAAC,EAAE,CAACG,QAAQ,CAAC,CAAC;EAEd,OAAO;IACL;IACAC,IAAI;IACJC,UAAU;IACVC,OAAO;IACPC,KAAK;IAEL;IACAE,QAAQ;IACRE,YAAY;IACZE,iBAAiB;IACjBG,iBAAiB;IACjBjB,aAAa,EAAEoB,mBAAmB;IAClCnB,UAAU,EAAEqB;EACd,CAAC;AACH,CAAC;AAACnB,EAAA,CA3CWD,OAAO;EAAA,QACDR,cAAc,EACcC,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}