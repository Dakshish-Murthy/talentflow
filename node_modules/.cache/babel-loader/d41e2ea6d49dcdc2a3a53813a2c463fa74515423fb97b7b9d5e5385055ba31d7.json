{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useRef } from 'react';\nimport { useAppDispatch, useAppSelector } from './redux';\nimport { fetchJobs, createJob, updateJob, reorderJobs, setFilters, setPagination, setCurrentJob, optimisticReorder, rollbackReorder } from '../store/slices/jobsSlice';\n\n// Cache structure\n\nconst CACHE_DURATION = 60000; // 1 minute cache\n\nexport const useJobs = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  const {\n    jobs,\n    currentJob,\n    loading,\n    error,\n    pagination,\n    filters\n  } = useAppSelector(state => state.jobs);\n\n  // Use ref for cache to avoid re-renders\n  const cacheRef = useRef({});\n  const generateCacheKey = params => {\n    return JSON.stringify({\n      page: params.page,\n      pageSize: params.pageSize,\n      search: params.search,\n      status: params.status\n    });\n  };\n  const getFromCache = cacheKey => {\n    const cached = cacheRef.current[cacheKey];\n    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n      return cached;\n    }\n    return null;\n  };\n  const setToCache = (cacheKey, data, total) => {\n    cacheRef.current[cacheKey] = {\n      data,\n      timestamp: Date.now(),\n      total\n    };\n  };\n  const clearCache = () => {\n    cacheRef.current = {};\n  };\n  const loadJobs = useCallback(async params => {\n    const cacheKey = generateCacheKey(params);\n    const cached = getFromCache(cacheKey);\n    if (cached && !params.forceRefresh) {\n      // Return cached data immediately\n      return {\n        payload: {\n          data: cached.data,\n          total: cached.total,\n          page: params.page || 1,\n          pageSize: params.pageSize || 10,\n          totalPages: Math.ceil(cached.total / (params.pageSize || 10))\n        }\n      };\n    }\n\n    // If not cached or force refresh, fetch from API\n    const result = await dispatch(fetchJobs(params));\n    if (result.payload && 'data' in result.payload && 'total' in result.payload) {\n      setToCache(cacheKey, result.payload.data, result.payload.total);\n    }\n    return result;\n  }, [dispatch]);\n  const addJob = useCallback(jobData => {\n    clearCache(); // Clear cache when adding new job\n    return dispatch(createJob(jobData));\n  }, [dispatch]);\n  const editJob = useCallback((id, updates) => {\n    clearCache(); // Clear cache when editing job\n    return dispatch(updateJob({\n      id,\n      updates\n    }));\n  }, [dispatch]);\n  const archiveJob = useCallback(id => {\n    clearCache(); // Clear cache when archiving job\n    return dispatch(updateJob({\n      id,\n      updates: {\n        status: 'archived'\n      }\n    }));\n  }, [dispatch]);\n  const activateJob = useCallback(id => {\n    clearCache(); // Clear cache when activating job\n    return dispatch(updateJob({\n      id,\n      updates: {\n        status: 'active'\n      }\n    }));\n  }, [dispatch]);\n  const handleReorder = useCallback(async (fromOrder, toOrder) => {\n    const originalJobs = [...jobs];\n\n    // Optimistic update\n    dispatch(optimisticReorder({\n      fromOrder,\n      toOrder\n    }));\n    clearCache(); // Clear cache when reordering\n\n    try {\n      await dispatch(reorderJobs({\n        fromOrder,\n        toOrder\n      })).unwrap();\n    } catch (error) {\n      // Rollback on failure\n      dispatch(rollbackReorder(originalJobs));\n      throw error;\n    }\n  }, [dispatch, jobs]);\n  const updateFilters = useCallback(newFilters => {\n    dispatch(setFilters(newFilters));\n  }, [dispatch]);\n  const updatePagination = useCallback(newPagination => {\n    dispatch(setPagination(newPagination));\n  }, [dispatch]);\n  const selectJob = useCallback(job => {\n    dispatch(setCurrentJob(job));\n  }, [dispatch]);\n\n  // Helper method to get active jobs\n  const getActiveJobs = useCallback(() => {\n    return jobs.filter(job => job.status === 'active');\n  }, [jobs]);\n  return {\n    // State\n    jobs,\n    currentJob,\n    loading,\n    error,\n    pagination,\n    filters,\n    // Computed values\n    activeJobs: getActiveJobs(),\n    // Actions\n    loadJobs,\n    addJob,\n    editJob,\n    archiveJob,\n    activateJob,\n    handleReorder,\n    updateFilters,\n    updatePagination,\n    selectJob,\n    clearCache\n  };\n};\n_s(useJobs, \"tTJOowspMVC5KmDHQd4i9eud4ZA=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});","map":{"version":3,"names":["useCallback","useRef","useAppDispatch","useAppSelector","fetchJobs","createJob","updateJob","reorderJobs","setFilters","setPagination","setCurrentJob","optimisticReorder","rollbackReorder","CACHE_DURATION","useJobs","_s","dispatch","jobs","currentJob","loading","error","pagination","filters","state","cacheRef","generateCacheKey","params","JSON","stringify","page","pageSize","search","status","getFromCache","cacheKey","cached","current","Date","now","timestamp","setToCache","data","total","clearCache","loadJobs","forceRefresh","payload","totalPages","Math","ceil","result","addJob","jobData","editJob","id","updates","archiveJob","activateJob","handleReorder","fromOrder","toOrder","originalJobs","unwrap","updateFilters","newFilters","updatePagination","newPagination","selectJob","job","getActiveJobs","filter","activeJobs"],"sources":["C:/Users/Dakshish/talentflow/src/hooks/useJobs.ts"],"sourcesContent":["import { useCallback, useRef } from 'react';\r\nimport { useAppDispatch, useAppSelector } from './redux';\r\nimport {\r\n  fetchJobs,\r\n  createJob,\r\n  updateJob,\r\n  reorderJobs,\r\n  setFilters,\r\n  setPagination,\r\n  setCurrentJob,\r\n  optimisticReorder,\r\n  rollbackReorder,\r\n} from '../store/slices/jobsSlice';\r\nimport { Job } from '../types';\r\n\r\n// Cache structure\r\ninterface JobsCache {\r\n  [key: string]: {\r\n    data: Job[];\r\n    timestamp: number;\r\n    total: number;\r\n  };\r\n}\r\n\r\nconst CACHE_DURATION = 60000; // 1 minute cache\r\n\r\nexport const useJobs = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { jobs, currentJob, loading, error, pagination, filters } = useAppSelector(\r\n    (state) => state.jobs\r\n  );\r\n\r\n  // Use ref for cache to avoid re-renders\r\n  const cacheRef = useRef<JobsCache>({});\r\n\r\n  const generateCacheKey = (params: any) => {\r\n    return JSON.stringify({\r\n      page: params.page,\r\n      pageSize: params.pageSize,\r\n      search: params.search,\r\n      status: params.status,\r\n    });\r\n  };\r\n\r\n  const getFromCache = (cacheKey: string) => {\r\n    const cached = cacheRef.current[cacheKey];\r\n    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\r\n      return cached;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const setToCache = (cacheKey: string, data: Job[], total: number) => {\r\n    cacheRef.current[cacheKey] = {\r\n      data,\r\n      timestamp: Date.now(),\r\n      total,\r\n    };\r\n  };\r\n\r\n  const clearCache = () => {\r\n    cacheRef.current = {};\r\n  };\r\n\r\n  const loadJobs = useCallback(async (params?: any) => {\r\n    const cacheKey = generateCacheKey(params);\r\n    const cached = getFromCache(cacheKey);\r\n    \r\n    if (cached && !params.forceRefresh) {\r\n      // Return cached data immediately\r\n      return {\r\n        payload: {\r\n          data: cached.data,\r\n          total: cached.total,\r\n          page: params.page || 1,\r\n          pageSize: params.pageSize || 10,\r\n          totalPages: Math.ceil(cached.total / (params.pageSize || 10)),\r\n        }\r\n      };\r\n    }\r\n\r\n    // If not cached or force refresh, fetch from API\r\n    const result = await dispatch(fetchJobs(params));\r\n    \r\n    if (result.payload && 'data' in result.payload && 'total' in result.payload) {\r\n      setToCache(cacheKey, result.payload.data, result.payload.total);\r\n    }\r\n    \r\n    return result;\r\n  }, [dispatch]);\r\n\r\n  const addJob = useCallback((jobData: Omit<Job, 'id' | 'createdAt' | 'updatedAt'>) => {\r\n    clearCache(); // Clear cache when adding new job\r\n    return dispatch(createJob(jobData));\r\n  }, [dispatch]);\r\n\r\n  const editJob = useCallback((id: string, updates: Partial<Job>) => {\r\n    clearCache(); // Clear cache when editing job\r\n    return dispatch(updateJob({ id, updates }));\r\n  }, [dispatch]);\r\n\r\n  const archiveJob = useCallback((id: string) => {\r\n    clearCache(); // Clear cache when archiving job\r\n    return dispatch(updateJob({ id, updates: { status: 'archived' as const } }));\r\n  }, [dispatch]);\r\n\r\n  const activateJob = useCallback((id: string) => {\r\n    clearCache(); // Clear cache when activating job\r\n    return dispatch(updateJob({ id, updates: { status: 'active' as const } }));\r\n  }, [dispatch]);\r\n\r\n  const handleReorder = useCallback(async (fromOrder: number, toOrder: number) => {\r\n    const originalJobs = [...jobs];\r\n    \r\n    // Optimistic update\r\n    dispatch(optimisticReorder({ fromOrder, toOrder }));\r\n    clearCache(); // Clear cache when reordering\r\n    \r\n    try {\r\n      await dispatch(reorderJobs({ fromOrder, toOrder })).unwrap();\r\n    } catch (error) {\r\n      // Rollback on failure\r\n      dispatch(rollbackReorder(originalJobs));\r\n      throw error;\r\n    }\r\n  }, [dispatch, jobs]);\r\n\r\n  const updateFilters = useCallback((newFilters: Partial<typeof filters>) => {\r\n    dispatch(setFilters(newFilters));\r\n  }, [dispatch]);\r\n\r\n  const updatePagination = useCallback((newPagination: Partial<typeof pagination>) => {\r\n    dispatch(setPagination(newPagination));\r\n  }, [dispatch]);\r\n\r\n  const selectJob = useCallback((job: Job | null) => {\r\n    dispatch(setCurrentJob(job));\r\n  }, [dispatch]);\r\n\r\n  // Helper method to get active jobs\r\n  const getActiveJobs = useCallback(() => {\r\n    return jobs.filter(job => job.status === 'active');\r\n  }, [jobs]);\r\n\r\n  return {\r\n    // State\r\n    jobs,\r\n    currentJob,\r\n    loading,\r\n    error,\r\n    pagination,\r\n    filters,\r\n    \r\n    // Computed values\r\n    activeJobs: getActiveJobs(),\r\n    \r\n    // Actions\r\n    loadJobs,\r\n    addJob,\r\n    editJob,\r\n    archiveJob,\r\n    activateJob,\r\n    handleReorder,\r\n    updateFilters,\r\n    updatePagination,\r\n    selectJob,\r\n    clearCache,\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}