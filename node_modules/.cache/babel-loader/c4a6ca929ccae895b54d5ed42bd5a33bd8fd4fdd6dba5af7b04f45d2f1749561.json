{"ast":null,"code":"import { db } from '../services/database';\nconst jobTitles = ['Frontend Developer', 'Backend Developer', 'Full Stack Developer', 'DevOps Engineer', 'UX Designer', 'Product Manager', 'Data Scientist', 'ML Engineer', 'Mobile Developer', 'QA Engineer', 'Technical Lead', 'Software Architect'];\nconst locations = ['New York, NY', 'San Francisco, CA', 'Austin, TX', 'Seattle, WA', 'Boston, MA', 'Denver, CO', 'Chicago, IL', 'Remote'];\nconst skills = ['React', 'TypeScript', 'Node.js', 'Python', 'AWS', 'Docker', 'Kubernetes', 'GraphQL', 'MongoDB', 'PostgreSQL', 'Redis', 'Jenkins', 'Terraform', 'Machine Learning', 'UI/UX'];\nconst names = ['John Smith', 'Jane Doe', 'Robert Johnson', 'Emily Davis', 'Michael Brown', 'Sarah Wilson', 'David Miller', 'Lisa Taylor', 'James Wilson', 'Maria Garcia', 'William Clark', 'Linda Rodriguez', 'Richard Lee', 'Susan Walker', 'Joseph Hall', 'Karen Young', 'Thomas King', 'Nancy Scott', 'Charles Green', 'Betty Adams'];\nconst generateEmail = name => {\n  return name.toLowerCase().replace(' ', '.') + '@example.com';\n};\nexport const seedDatabase = async () => {\n  // Clear existing data\n  await Promise.all([db.jobs.clear(), db.candidates.clear(), db.assessments.clear(), db.responses.clear()]);\n\n  // Generate jobs\n  const jobs = [];\n  for (let i = 0; i < 25; i++) {\n    const title = jobTitles[Math.floor(Math.random() * jobTitles.length)];\n    const location = locations[Math.floor(Math.random() * locations.length)];\n    const job = {\n      id: `job-${i + 1}`,\n      title: title,\n      slug: `${title.toLowerCase().replace(/ /g, '-')}-${i + 1}`,\n      status: Math.random() > 0.3 ? 'active' : 'archived',\n      tags: Array.from(new Set(Array.from({\n        length: 3\n      }, () => skills[Math.floor(Math.random() * skills.length)]))),\n      order: i + 1,\n      description: `We are looking for a skilled ${title} to join our team. This position offers competitive compensation and benefits, with opportunities for professional growth and development.`,\n      salary: `$${Math.floor(Math.random() * 100000) + 50000}`,\n      location,\n      brandLogo: `https://via.placeholder.com/100x100/007bff/ffffff?text=T`,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    jobs.push(job);\n  }\n\n  // Generate candidates\n  const candidates = [];\n  const stages = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\n  for (let i = 0; i < 1000; i++) {\n    const name = names[Math.floor(Math.random() * names.length)];\n    const job = jobs[Math.floor(Math.random() * jobs.length)];\n    const candidate = {\n      id: `candidate-${i + 1}`,\n      name,\n      email: generateEmail(name),\n      phone: `+1${Math.floor(Math.random() * 1000000000).toString().padStart(10, '0')}`,\n      stage: stages[Math.floor(Math.random() * stages.length)],\n      jobId: job.id,\n      jobTitle: job.title,\n      appliedDate: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),\n      notes: []\n    };\n    candidates.push(candidate);\n  }\n\n  // Generate assessments\n  const assessments = [];\n  const questionTypes = ['single-choice', 'multi-choice', 'short-text', 'long-text', 'numeric'];\n  for (let i = 0; i < 3; i++) {\n    const job = jobs[i];\n    const sections = [];\n    for (let s = 0; s < 3; s++) {\n      const questions = [];\n      for (let q = 0; q < 4; q++) {\n        questions.push({\n          id: `q-${s}-${q}`,\n          type: questionTypes[Math.floor(Math.random() * questionTypes.length)],\n          question: `Sample question ${q + 1} for section ${s + 1}`,\n          required: Math.random() > 0.5,\n          options: ['Option 1', 'Option 2', 'Option 3', 'Option 4'],\n          maxLength: 500\n        });\n      }\n      sections.push({\n        id: `section-${s}`,\n        title: `Section ${s + 1}`,\n        questions\n      });\n    }\n    assessments.push({\n      id: `assessment-${i + 1}`,\n      jobId: job.id,\n      title: `Technical Assessment - ${job.title}`,\n      description: 'Please complete this assessment to proceed with your application',\n      sections\n    });\n  }\n\n  // Add to database\n  await Promise.all([db.jobs.bulkAdd(jobs), db.candidates.bulkAdd(candidates), db.assessments.bulkAdd(assessments)]);\n  console.log('Database seeded successfully');\n};","map":{"version":3,"names":["db","jobTitles","locations","skills","names","generateEmail","name","toLowerCase","replace","seedDatabase","Promise","all","jobs","clear","candidates","assessments","responses","i","title","Math","floor","random","length","location","job","id","slug","status","tags","Array","from","Set","order","description","salary","brandLogo","createdAt","Date","updatedAt","push","stages","candidate","email","phone","toString","padStart","stage","jobId","jobTitle","appliedDate","now","notes","questionTypes","sections","s","questions","q","type","question","required","options","maxLength","bulkAdd","console","log"],"sources":["C:/Users/Dakshish/talentflow/src/data/seed.ts"],"sourcesContent":["import { Job, Candidate, Assessment } from '../types';\r\nimport { db } from '../services/database';\r\n\r\nconst jobTitles = [\r\n  'Frontend Developer', 'Backend Developer', 'Full Stack Developer',\r\n  'DevOps Engineer', 'UX Designer', 'Product Manager',\r\n  'Data Scientist', 'ML Engineer', 'Mobile Developer',\r\n  'QA Engineer', 'Technical Lead', 'Software Architect'\r\n];\r\n\r\nconst locations = [\r\n  'New York, NY', 'San Francisco, CA', 'Austin, TX', 'Seattle, WA',\r\n  'Boston, MA', 'Denver, CO', 'Chicago, IL', 'Remote'\r\n];\r\n\r\nconst skills = [\r\n  'React', 'TypeScript', 'Node.js', 'Python', 'AWS', 'Docker',\r\n  'Kubernetes', 'GraphQL', 'MongoDB', 'PostgreSQL', 'Redis',\r\n  'Jenkins', 'Terraform', 'Machine Learning', 'UI/UX'\r\n];\r\n\r\nconst names = [\r\n  'John Smith', 'Jane Doe', 'Robert Johnson', 'Emily Davis',\r\n  'Michael Brown', 'Sarah Wilson', 'David Miller', 'Lisa Taylor',\r\n  'James Wilson', 'Maria Garcia', 'William Clark', 'Linda Rodriguez',\r\n  'Richard Lee', 'Susan Walker', 'Joseph Hall', 'Karen Young',\r\n  'Thomas King', 'Nancy Scott', 'Charles Green', 'Betty Adams'\r\n];\r\n\r\nconst generateEmail = (name: string) => {\r\n  return name.toLowerCase().replace(' ', '.') + '@example.com';\r\n};\r\n\r\nexport const seedDatabase = async () => {\r\n  // Clear existing data\r\n  await Promise.all([\r\n    db.jobs.clear(),\r\n    db.candidates.clear(),\r\n    db.assessments.clear(),\r\n    db.responses.clear()\r\n  ]);\r\n\r\n  // Generate jobs\r\n  const jobs: Job[] = [];\r\n  for (let i = 0; i < 25; i++) {\r\n    const title = jobTitles[Math.floor(Math.random() * jobTitles.length)];\r\n    const location = locations[Math.floor(Math.random() * locations.length)];\r\n    \r\n    const job: Job = {\r\n      id: `job-${i + 1}`,\r\n      title: title,\r\n      slug: `${title.toLowerCase().replace(/ /g, '-')}-${i + 1}`,\r\n      status: Math.random() > 0.3 ? 'active' : 'archived',\r\n      tags: Array.from(new Set(Array.from({ length: 3 }, () => \r\n          skills[Math.floor(Math.random() * skills.length)]\r\n            ))),\r\n      order: i + 1,\r\n      description: `We are looking for a skilled ${title} to join our team. This position offers competitive compensation and benefits, with opportunities for professional growth and development.`,\r\n      salary: `$${Math.floor(Math.random() * 100000) + 50000}`,\r\n      location,\r\n      brandLogo: `https://via.placeholder.com/100x100/007bff/ffffff?text=T`,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date()\r\n    };\r\n    jobs.push(job);\r\n  }\r\n\r\n  // Generate candidates\r\n  const candidates: Candidate[] = [];\r\n  const stages: Candidate['stage'][] = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\r\n  \r\n  for (let i = 0; i < 1000; i++) {\r\n    const name = names[Math.floor(Math.random() * names.length)];\r\n    const job = jobs[Math.floor(Math.random() * jobs.length)];\r\n    \r\n    const candidate: Candidate = {\r\n      id: `candidate-${i + 1}`,\r\n      name,\r\n      email: generateEmail(name),\r\n      phone: `+1${Math.floor(Math.random() * 1000000000).toString().padStart(10, '0')}`,\r\n      stage: stages[Math.floor(Math.random() * stages.length)],\r\n      jobId: job.id,\r\n      jobTitle: job.title,\r\n      appliedDate: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),\r\n      notes: []\r\n    };\r\n    candidates.push(candidate);\r\n  }\r\n\r\n  // Generate assessments\r\n  const assessments: Assessment[] = [];\r\n  const questionTypes: any[] = ['single-choice', 'multi-choice', 'short-text', 'long-text', 'numeric'];\r\n  \r\n  for (let i = 0; i < 3; i++) {\r\n    const job = jobs[i];\r\n    const sections = [];\r\n    \r\n    for (let s = 0; s < 3; s++) {\r\n      const questions = [];\r\n      for (let q = 0; q < 4; q++) {\r\n        questions.push({\r\n          id: `q-${s}-${q}`,\r\n          type: questionTypes[Math.floor(Math.random() * questionTypes.length)],\r\n          question: `Sample question ${q + 1} for section ${s + 1}`,\r\n          required: Math.random() > 0.5,\r\n          options: ['Option 1', 'Option 2', 'Option 3', 'Option 4'],\r\n          maxLength: 500\r\n        });\r\n      }\r\n      sections.push({\r\n        id: `section-${s}`,\r\n        title: `Section ${s + 1}`,\r\n        questions\r\n      });\r\n    }\r\n    \r\n    assessments.push({\r\n      id: `assessment-${i + 1}`,\r\n      jobId: job.id,\r\n      title: `Technical Assessment - ${job.title}`,\r\n      description: 'Please complete this assessment to proceed with your application',\r\n      sections\r\n    });\r\n  }\r\n\r\n  // Add to database\r\n  await Promise.all([\r\n    db.jobs.bulkAdd(jobs),\r\n    db.candidates.bulkAdd(candidates),\r\n    db.assessments.bulkAdd(assessments)\r\n  ]);\r\n\r\n  console.log('Database seeded successfully');\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}