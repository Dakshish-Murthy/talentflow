{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { useAppDispatch, useAppSelector } from './redux';\nimport { fetchAssessment, saveAssessment, submitAssessmentResponse, setCurrentAssessment, setPreviewMode, updateAssessment, addSection, updateSection, removeSection, addQuestion, updateQuestion, removeQuestion, reorderQuestions, setResponse, updateResponse, setValidationError, clearValidationError, clearAllValidationErrors } from '../store/slices/assessmentsSlice';\nexport const useAssessments = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  const {\n    assessments,\n    currentAssessment,\n    currentResponse,\n    loading,\n    error,\n    previewMode,\n    validationErrors\n  } = useAppSelector(state => state.assessments);\n  const loadAssessment = useCallback(jobId => {\n    return dispatch(fetchAssessment(jobId));\n  }, [dispatch]);\n  const saveCurrentAssessment = useCallback(() => {\n    if (currentAssessment) {\n      return dispatch(saveAssessment(currentAssessment));\n    }\n  }, [dispatch, currentAssessment]);\n  const submitResponse = useCallback(response => {\n    return dispatch(submitAssessmentResponse(response));\n  }, [dispatch]);\n  const createNewAssessment = useCallback((jobId, title) => {\n    const newAssessment = {\n      id: `assessment-${Date.now()}`,\n      jobId,\n      title,\n      description: '',\n      sections: []\n    };\n    dispatch(setCurrentAssessment(newAssessment));\n  }, [dispatch]);\n  const handleUpdateAssessment = useCallback(updates => {\n    dispatch(updateAssessment(updates));\n  }, [dispatch]);\n  const handleAddSection = useCallback(section => {\n    dispatch(addSection(section));\n  }, [dispatch]);\n  const handleUpdateSection = useCallback((sectionId, updates) => {\n    dispatch(updateSection({\n      sectionId,\n      updates\n    }));\n  }, [dispatch]);\n  const handleRemoveSection = useCallback(sectionId => {\n    dispatch(removeSection(sectionId));\n  }, [dispatch]);\n  const handleAddQuestion = useCallback((sectionId, question) => {\n    dispatch(addQuestion({\n      sectionId,\n      question\n    }));\n  }, [dispatch]);\n  const handleUpdateQuestion = useCallback((sectionId, questionId, updates) => {\n    dispatch(updateQuestion({\n      sectionId,\n      questionId,\n      updates\n    }));\n  }, [dispatch]);\n  const handleRemoveQuestion = useCallback((sectionId, questionId) => {\n    dispatch(removeQuestion({\n      sectionId,\n      questionId\n    }));\n  }, [dispatch]);\n  const handleReorderQuestions = useCallback((sectionId, fromIndex, toIndex) => {\n    dispatch(reorderQuestions({\n      sectionId,\n      fromIndex,\n      toIndex\n    }));\n  }, [dispatch]);\n  const handleSetResponse = useCallback(response => {\n    dispatch(setResponse(response));\n  }, [dispatch]);\n  const handleUpdateResponse = useCallback((questionId, value) => {\n    dispatch(updateResponse({\n      questionId,\n      value\n    }));\n  }, [dispatch]);\n  const handleSetValidationError = useCallback((questionId, error) => {\n    dispatch(setValidationError({\n      questionId,\n      error\n    }));\n  }, [dispatch]);\n  const handleClearValidationError = useCallback(questionId => {\n    dispatch(clearValidationError(questionId));\n  }, [dispatch]);\n  const handleClearAllValidationErrors = useCallback(() => {\n    dispatch(clearAllValidationErrors());\n  }, [dispatch]);\n  const togglePreviewMode = useCallback(() => {\n    dispatch(setPreviewMode(!previewMode));\n  }, [dispatch, previewMode]);\n  return {\n    // State\n    assessments,\n    currentAssessment,\n    currentResponse,\n    loading,\n    error,\n    previewMode,\n    validationErrors,\n    // Actions\n    loadAssessment,\n    saveCurrentAssessment,\n    submitResponse,\n    createNewAssessment,\n    handleUpdateAssessment,\n    handleAddSection,\n    handleUpdateSection,\n    handleRemoveSection,\n    handleAddQuestion,\n    handleUpdateQuestion,\n    handleRemoveQuestion,\n    handleReorderQuestions,\n    handleSetResponse,\n    handleUpdateResponse,\n    handleSetValidationError,\n    handleClearValidationError,\n    handleClearAllValidationErrors,\n    togglePreviewMode\n  };\n};\n_s(useAssessments, \"zIqGK/faaKXx89XQj6KbuRx/7X8=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});","map":{"version":3,"names":["useCallback","useAppDispatch","useAppSelector","fetchAssessment","saveAssessment","submitAssessmentResponse","setCurrentAssessment","setPreviewMode","updateAssessment","addSection","updateSection","removeSection","addQuestion","updateQuestion","removeQuestion","reorderQuestions","setResponse","updateResponse","setValidationError","clearValidationError","clearAllValidationErrors","useAssessments","_s","dispatch","assessments","currentAssessment","currentResponse","loading","error","previewMode","validationErrors","state","loadAssessment","jobId","saveCurrentAssessment","submitResponse","response","createNewAssessment","title","newAssessment","id","Date","now","description","sections","handleUpdateAssessment","updates","handleAddSection","section","handleUpdateSection","sectionId","handleRemoveSection","handleAddQuestion","question","handleUpdateQuestion","questionId","handleRemoveQuestion","handleReorderQuestions","fromIndex","toIndex","handleSetResponse","handleUpdateResponse","value","handleSetValidationError","handleClearValidationError","handleClearAllValidationErrors","togglePreviewMode"],"sources":["C:/Users/Dakshish/talentflow/src/hooks/useAssessments.ts"],"sourcesContent":["import { useCallback } from 'react';\r\nimport { useAppDispatch, useAppSelector } from './redux';\r\nimport {\r\n  fetchAssessment,\r\n  saveAssessment,\r\n  submitAssessmentResponse,\r\n  setCurrentAssessment,\r\n  setPreviewMode,\r\n  updateAssessment,\r\n  addSection,\r\n  updateSection,\r\n  removeSection,\r\n  addQuestion,\r\n  updateQuestion,\r\n  removeQuestion,\r\n  reorderQuestions,\r\n  setResponse,\r\n  updateResponse,\r\n  setValidationError,\r\n  clearValidationError,\r\n  clearAllValidationErrors,\r\n} from '../store/slices/assessmentsSlice';\r\nimport { Assessment, AssessmentResponse, Question, Section } from '../types';\r\n\r\nexport const useAssessments = () => {\r\n  const dispatch = useAppDispatch();\r\n  const {\r\n    assessments,\r\n    currentAssessment,\r\n    currentResponse,\r\n    loading,\r\n    error,\r\n    previewMode,\r\n    validationErrors,\r\n  } = useAppSelector((state) => state.assessments);\r\n\r\n  const loadAssessment = useCallback((jobId: string) => {\r\n    return dispatch(fetchAssessment(jobId));\r\n  }, [dispatch]);\r\n\r\n  const saveCurrentAssessment = useCallback(() => {\r\n    if (currentAssessment) {\r\n      return dispatch(saveAssessment(currentAssessment));\r\n    }\r\n  }, [dispatch, currentAssessment]);\r\n\r\n  const submitResponse = useCallback((response: AssessmentResponse) => {\r\n    return dispatch(submitAssessmentResponse(response));\r\n  }, [dispatch]);\r\n\r\n  const createNewAssessment = useCallback((jobId: string, title: string) => {\r\n    const newAssessment: Assessment = {\r\n      id: `assessment-${Date.now()}`,\r\n      jobId,\r\n      title,\r\n      description: '',\r\n      sections: [],\r\n    };\r\n    dispatch(setCurrentAssessment(newAssessment));\r\n  }, [dispatch]);\r\n\r\n  const handleUpdateAssessment = useCallback((updates: Partial<Assessment>) => {\r\n    dispatch(updateAssessment(updates));\r\n  }, [dispatch]);\r\n\r\n  const handleAddSection = useCallback((section: Section) => {\r\n    dispatch(addSection(section));\r\n  }, [dispatch]);\r\n\r\n  const handleUpdateSection = useCallback((sectionId: string, updates: Partial<Section>) => {\r\n    dispatch(updateSection({ sectionId, updates }));\r\n  }, [dispatch]);\r\n\r\n  const handleRemoveSection = useCallback((sectionId: string) => {\r\n    dispatch(removeSection(sectionId));\r\n  }, [dispatch]);\r\n\r\n  const handleAddQuestion = useCallback((sectionId: string, question: Question) => {\r\n    dispatch(addQuestion({ sectionId, question }));\r\n  }, [dispatch]);\r\n\r\n  const handleUpdateQuestion = useCallback((sectionId: string, questionId: string, updates: Partial<Question>) => {\r\n    dispatch(updateQuestion({ sectionId, questionId, updates }));\r\n  }, [dispatch]);\r\n\r\n  const handleRemoveQuestion = useCallback((sectionId: string, questionId: string) => {\r\n    dispatch(removeQuestion({ sectionId, questionId }));\r\n  }, [dispatch]);\r\n\r\n  const handleReorderQuestions = useCallback((sectionId: string, fromIndex: number, toIndex: number) => {\r\n    dispatch(reorderQuestions({ sectionId, fromIndex, toIndex }));\r\n  }, [dispatch]);\r\n\r\n  const handleSetResponse = useCallback((response: AssessmentResponse | null) => {\r\n    dispatch(setResponse(response));\r\n  }, [dispatch]);\r\n\r\n  const handleUpdateResponse = useCallback((questionId: string, value: any) => {\r\n    dispatch(updateResponse({ questionId, value }));\r\n  }, [dispatch]);\r\n\r\n  const handleSetValidationError = useCallback((questionId: string, error: string) => {\r\n    dispatch(setValidationError({ questionId, error }));\r\n  }, [dispatch]);\r\n\r\n  const handleClearValidationError = useCallback((questionId: string) => {\r\n    dispatch(clearValidationError(questionId));\r\n  }, [dispatch]);\r\n\r\n  const handleClearAllValidationErrors = useCallback(() => {\r\n    dispatch(clearAllValidationErrors());\r\n  }, [dispatch]);\r\n\r\n  const togglePreviewMode = useCallback(() => {\r\n    dispatch(setPreviewMode(!previewMode));\r\n  }, [dispatch, previewMode]);\r\n\r\n  return {\r\n    // State\r\n    assessments,\r\n    currentAssessment,\r\n    currentResponse,\r\n    loading,\r\n    error,\r\n    previewMode,\r\n    validationErrors,\r\n\r\n    // Actions\r\n    loadAssessment,\r\n    saveCurrentAssessment,\r\n    submitResponse,\r\n    createNewAssessment,\r\n    handleUpdateAssessment,\r\n    handleAddSection,\r\n    handleUpdateSection,\r\n    handleRemoveSection,\r\n    handleAddQuestion,\r\n    handleUpdateQuestion,\r\n    handleRemoveQuestion,\r\n    handleReorderQuestions,\r\n    handleSetResponse,\r\n    handleUpdateResponse,\r\n    handleSetValidationError,\r\n    handleClearValidationError,\r\n    handleClearAllValidationErrors,\r\n    togglePreviewMode,\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}