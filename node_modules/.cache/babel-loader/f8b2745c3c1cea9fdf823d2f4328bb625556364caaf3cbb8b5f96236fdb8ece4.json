{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dakshish\\\\talentflow\\\\src\\\\components\\\\candidates\\\\KanbanBoard.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { sortableKeyboardCoordinates } from '@dnd-kit/sortable';\nimport { useCandidates } from '../../hooks/useCandidates';\nimport StageColumn from './StageColumn';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KanbanBoard = ({\n  candidates\n}) => {\n  _s();\n  const {\n    updateCandidateStage\n  } = useCandidates();\n  const stages = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n  const onDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (over && active.id !== over.id) {\n      const candidateId = active.id;\n      const newStage = over.id;\n      updateCandidateStage(candidateId, newStage);\n    }\n  };\n  const getCandidatesByStage = stage => {\n    return candidates.filter(candidate => candidate.stage === stage);\n  };\n  const getStageLabel = stage => {\n    const labels = {\n      applied: 'Applied',\n      screen: 'Screen',\n      tech: 'Technical',\n      offer: 'Offer',\n      hired: 'Hired',\n      rejected: 'Rejected'\n    };\n    return labels[stage];\n  };\n  const getStageColor = stage => {\n    const colors = {\n      applied: 'bg-blue-500',\n      screen: 'bg-yellow-500',\n      tech: 'bg-purple-500',\n      offer: 'bg-green-500',\n      hired: 'bg-emerald-500',\n      rejected: 'bg-red-500'\n    };\n    return colors[stage];\n  };\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    sensors: sensors,\n    collisionDetection: closestCenter,\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex space-x-4 p-4 overflow-x-auto min-h-[600px]\",\n      children: stages.map(stage => /*#__PURE__*/_jsxDEV(StageColumn, {\n        stage: stage,\n        candidates: getCandidatesByStage(stage),\n        stageLabel: getStageLabel(stage),\n        stageColor: getStageColor(stage)\n      }, stage, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(KanbanBoard, \"0pA+FRD1F9bjGwMYhZ2miavneyA=\", false, function () {\n  return [useCandidates, useSensors, useSensor, useSensor];\n});\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","DndContext","closestCenter","KeyboardSensor","PointerSensor","useSensor","useSensors","sortableKeyboardCoordinates","useCandidates","StageColumn","jsxDEV","_jsxDEV","KanbanBoard","candidates","_s","updateCandidateStage","stages","sensors","coordinateGetter","onDragEnd","event","active","over","id","candidateId","newStage","getCandidatesByStage","stage","filter","candidate","getStageLabel","labels","applied","screen","tech","offer","hired","rejected","getStageColor","colors","collisionDetection","children","className","map","stageLabel","stageColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dakshish/talentflow/src/components/candidates/KanbanBoard.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n  DragEndEvent,\r\n} from '@dnd-kit/core';\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  sortableKeyboardCoordinates,\r\n  horizontalListSortingStrategy,\r\n} from '@dnd-kit/sortable';\r\nimport { Candidate } from '../../types';\r\nimport { useCandidates } from '../../hooks/useCandidates';\r\nimport StageColumn from './StageColumn';\r\n\r\ninterface KanbanBoardProps {\r\n  candidates: Candidate[];\r\n}\r\n\r\nconst KanbanBoard: React.FC<KanbanBoardProps> = ({ candidates }) => {\r\n  const { updateCandidateStage } = useCandidates();\r\n\r\n  const stages: Candidate['stage'][] = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\r\n\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor),\r\n    useSensor(KeyboardSensor, {\r\n      coordinateGetter: sortableKeyboardCoordinates,\r\n    })\r\n  );\r\n\r\n  const onDragEnd = (event: DragEndEvent) => {\r\n    const { active, over } = event;\r\n\r\n    if (over && active.id !== over.id) {\r\n      const candidateId = active.id as string;\r\n      const newStage = over.id as Candidate['stage'];\r\n      \r\n      updateCandidateStage(candidateId, newStage);\r\n    }\r\n  };\r\n\r\n  const getCandidatesByStage = (stage: Candidate['stage']) => {\r\n    return candidates.filter(candidate => candidate.stage === stage);\r\n  };\r\n\r\n  const getStageLabel = (stage: Candidate['stage']) => {\r\n    const labels = {\r\n      applied: 'Applied',\r\n      screen: 'Screen',\r\n      tech: 'Technical',\r\n      offer: 'Offer',\r\n      hired: 'Hired',\r\n      rejected: 'Rejected',\r\n    };\r\n    return labels[stage];\r\n  };\r\n\r\n  const getStageColor = (stage: Candidate['stage']) => {\r\n    const colors = {\r\n      applied: 'bg-blue-500',\r\n      screen: 'bg-yellow-500',\r\n      tech: 'bg-purple-500',\r\n      offer: 'bg-green-500',\r\n      hired: 'bg-emerald-500',\r\n      rejected: 'bg-red-500',\r\n    };\r\n    return colors[stage];\r\n  };\r\n\r\n  return (\r\n    <DndContext\r\n      sensors={sensors}\r\n      collisionDetection={closestCenter}\r\n      onDragEnd={onDragEnd}\r\n    >\r\n      <div className=\"flex space-x-4 p-4 overflow-x-auto min-h-[600px]\">\r\n        {stages.map((stage) => (\r\n          <StageColumn\r\n            key={stage}\r\n            stage={stage}\r\n            candidates={getCandidatesByStage(stage)}\r\n            stageLabel={getStageLabel(stage)}\r\n            stageColor={getStageColor(stage)}\r\n          />\r\n        ))}\r\n      </div>\r\n    </DndContext>\r\n  );\r\n};\r\n\r\nexport default KanbanBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}