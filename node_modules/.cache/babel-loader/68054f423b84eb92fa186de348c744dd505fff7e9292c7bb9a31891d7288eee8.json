{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { api } from '../../services/api';\nconst initialState = {\n  jobs: [],\n  currentJob: null,\n  loading: false,\n  error: null,\n  pagination: {\n    page: 1,\n    pageSize: 10,\n    total: 0,\n    totalPages: 0\n  },\n  filters: {\n    search: '',\n    status: '',\n    tags: []\n  }\n};\n\n// Async thunks\nexport const fetchJobs = createAsyncThunk('jobs/fetchJobs', async (params = {}) => {\n  const response = await api.getJobs(params);\n  return response;\n});\nexport const createJob = createAsyncThunk('jobs/createJob', async jobData => {\n  const response = await api.createJob(jobData);\n  return response;\n});\nexport const updateJob = createAsyncThunk('jobs/updateJob', async ({\n  id,\n  updates\n}) => {\n  const response = await api.updateJob(id, updates);\n  return response;\n});\nexport const reorderJobs = createAsyncThunk('jobs/reorderJobs', async ({\n  fromOrder,\n  toOrder\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.reorderJobs(fromOrder, toOrder);\n    return response;\n  } catch (error) {\n    return rejectWithValue(error);\n  }\n});\nconst jobsSlice = createSlice({\n  name: 'jobs',\n  initialState,\n  reducers: {\n    setFilters: (state, action) => {\n      state.filters = {\n        ...state.filters,\n        ...action.payload\n      };\n      // Reset to first page when filters change\n      state.pagination.page = 1;\n    },\n    setPagination: (state, action) => {\n      state.pagination = {\n        ...state.pagination,\n        ...action.payload\n      };\n    },\n    setCurrentJob: (state, action) => {\n      state.currentJob = action.payload;\n    },\n    clearError: state => {\n      state.error = null;\n    },\n    // Optimistic update for drag and drop\n    optimisticReorder: (state, action) => {\n      const {\n        fromOrder,\n        toOrder\n      } = action.payload;\n      const jobs = [...state.jobs];\n      const fromIndex = jobs.findIndex(job => job.order === fromOrder);\n      const toIndex = jobs.findIndex(job => job.order === toOrder);\n      if (fromIndex !== -1 && toIndex !== -1) {\n        const [movedJob] = jobs.splice(fromIndex, 1);\n        jobs.splice(toIndex, 0, movedJob);\n\n        // Update orders\n        jobs.forEach((job, index) => {\n          job.order = index + 1;\n        });\n        state.jobs = jobs;\n      }\n    },\n    // Rollback for failed reorder\n    rollbackReorder: (state, action) => {\n      state.jobs = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Fetch jobs\n    .addCase(fetchJobs.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchJobs.fulfilled, (state, action) => {\n      state.loading = false;\n      state.jobs = action.payload.data || [];\n      state.pagination = {\n        page: action.payload.page || 1,\n        pageSize: action.payload.pageSize || 10,\n        total: action.payload.total || 0,\n        totalPages: action.payload.totalPages || 0\n      };\n    }).addCase(fetchJobs.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || 'Failed to fetch jobs';\n    })\n    // Create job\n    .addCase(createJob.fulfilled, (state, action) => {\n      state.jobs.unshift(action.payload);\n      // Update pagination totals\n      state.pagination.total += 1;\n      state.pagination.totalPages = Math.ceil(state.pagination.total / state.pagination.pageSize);\n    }).addCase(createJob.rejected, (state, action) => {\n      state.error = action.error.message || 'Failed to create job';\n    })\n    // Update job\n    .addCase(updateJob.fulfilled, (state, action) => {\n      var _state$currentJob;\n      const index = state.jobs.findIndex(job => job.id === action.payload.id);\n      if (index !== -1) {\n        state.jobs[index] = action.payload;\n      }\n      if (((_state$currentJob = state.currentJob) === null || _state$currentJob === void 0 ? void 0 : _state$currentJob.id) === action.payload.id) {\n        state.currentJob = action.payload;\n      }\n    })\n    // Reorder jobs\n    .addCase(reorderJobs.rejected, (state, action) => {\n      state.error = 'Failed to reorder jobs. Please try again.';\n    });\n  }\n});\nexport const {\n  setFilters,\n  setPagination,\n  setCurrentJob,\n  clearError,\n  optimisticReorder,\n  rollbackReorder\n} = jobsSlice.actions;\nexport default jobsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","initialState","jobs","currentJob","loading","error","pagination","page","pageSize","total","totalPages","filters","search","status","tags","fetchJobs","params","response","getJobs","createJob","jobData","updateJob","id","updates","reorderJobs","fromOrder","toOrder","rejectWithValue","jobsSlice","name","reducers","setFilters","state","action","payload","setPagination","setCurrentJob","clearError","optimisticReorder","fromIndex","findIndex","job","order","toIndex","movedJob","splice","forEach","index","rollbackReorder","extraReducers","builder","addCase","pending","fulfilled","data","rejected","message","unshift","Math","ceil","_state$currentJob","actions","reducer"],"sources":["C:/Users/Dakshish/talentflow/src/store/slices/jobsSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Job } from '../../types';\r\nimport { api } from '../../services/api';\r\n\r\ninterface JobsState {\r\n  jobs: Job[];\r\n  currentJob: Job | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  pagination: {\r\n    page: number;\r\n    pageSize: number;\r\n    total: number;\r\n    totalPages: number;\r\n  };\r\n  filters: {\r\n    search: string;\r\n    status: string;\r\n    tags: string[];\r\n  };\r\n}\r\n\r\nconst initialState: JobsState = {\r\n  jobs: [],\r\n  currentJob: null,\r\n  loading: false,\r\n  error: null,\r\n  pagination: {\r\n    page: 1,\r\n    pageSize: 10,\r\n    total: 0,\r\n    totalPages: 0,\r\n  },\r\n  filters: {\r\n    search: '',\r\n    status: '',\r\n    tags: [],\r\n  },\r\n};\r\n\r\n// Async thunks\r\nexport const fetchJobs = createAsyncThunk(\r\n  'jobs/fetchJobs',\r\n  async (params: { page?: number; pageSize?: number; search?: string; status?: string } = {}) => {\r\n    const response = await api.getJobs(params);\r\n    return response;\r\n  }\r\n);\r\n\r\nexport const createJob = createAsyncThunk(\r\n  'jobs/createJob',\r\n  async (jobData: Omit<Job, 'id' | 'createdAt' | 'updatedAt'>) => {\r\n    const response = await api.createJob(jobData);\r\n    return response;\r\n  }\r\n);\r\n\r\nexport const updateJob = createAsyncThunk(\r\n  'jobs/updateJob',\r\n  async ({ id, updates }: { id: string; updates: Partial<Job> }) => {\r\n    const response = await api.updateJob(id, updates);\r\n    return response;\r\n  }\r\n);\r\n\r\nexport const reorderJobs = createAsyncThunk(\r\n  'jobs/reorderJobs',\r\n  async ({ fromOrder, toOrder }: { fromOrder: number; toOrder: number }, { rejectWithValue }) => {\r\n    try {\r\n      const response = await api.reorderJobs(fromOrder, toOrder);\r\n      return response;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nconst jobsSlice = createSlice({\r\n  name: 'jobs',\r\n  initialState,\r\n  reducers: {\r\n    setFilters: (state, action: PayloadAction<Partial<JobsState['filters']>>) => {\r\n      state.filters = { ...state.filters, ...action.payload };\r\n      // Reset to first page when filters change\r\n      state.pagination.page = 1;\r\n    },\r\n    setPagination: (state, action: PayloadAction<Partial<JobsState['pagination']>>) => {\r\n      state.pagination = { ...state.pagination, ...action.payload };\r\n    },\r\n    setCurrentJob: (state, action: PayloadAction<Job | null>) => {\r\n      state.currentJob = action.payload;\r\n    },\r\n    clearError: (state) => {\r\n      state.error = null;\r\n    },\r\n    // Optimistic update for drag and drop\r\n    optimisticReorder: (state, action: PayloadAction<{ fromOrder: number; toOrder: number }>) => {\r\n      const { fromOrder, toOrder } = action.payload;\r\n      const jobs = [...state.jobs];\r\n      \r\n      const fromIndex = jobs.findIndex(job => job.order === fromOrder);\r\n      const toIndex = jobs.findIndex(job => job.order === toOrder);\r\n      \r\n      if (fromIndex !== -1 && toIndex !== -1) {\r\n        const [movedJob] = jobs.splice(fromIndex, 1);\r\n        jobs.splice(toIndex, 0, movedJob);\r\n        \r\n        // Update orders\r\n        jobs.forEach((job, index) => {\r\n          job.order = index + 1;\r\n        });\r\n        \r\n        state.jobs = jobs;\r\n      }\r\n    },\r\n    // Rollback for failed reorder\r\n    rollbackReorder: (state, action: PayloadAction<Job[]>) => {\r\n      state.jobs = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Fetch jobs\r\n      .addCase(fetchJobs.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchJobs.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.jobs = action.payload.data || [];\r\n        state.pagination = {\r\n          page: action.payload.page || 1,\r\n          pageSize: action.payload.pageSize || 10,\r\n          total: action.payload.total || 0,\r\n          totalPages: action.payload.totalPages || 0,\r\n        };\r\n      })\r\n      .addCase(fetchJobs.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message || 'Failed to fetch jobs';\r\n      })\r\n      // Create job\r\n      .addCase(createJob.fulfilled, (state, action) => {\r\n        state.jobs.unshift(action.payload);\r\n        // Update pagination totals\r\n        state.pagination.total += 1;\r\n        state.pagination.totalPages = Math.ceil(state.pagination.total / state.pagination.pageSize);\r\n      })\r\n      .addCase(createJob.rejected, (state, action) => {\r\n        state.error = action.error.message || 'Failed to create job';\r\n      })\r\n      // Update job\r\n      .addCase(updateJob.fulfilled, (state, action) => {\r\n        const index = state.jobs.findIndex(job => job.id === action.payload.id);\r\n        if (index !== -1) {\r\n          state.jobs[index] = action.payload;\r\n        }\r\n        if (state.currentJob?.id === action.payload.id) {\r\n          state.currentJob = action.payload;\r\n        }\r\n      })\r\n      // Reorder jobs\r\n      .addCase(reorderJobs.rejected, (state, action) => {\r\n        state.error = 'Failed to reorder jobs. Please try again.';\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  setFilters,\r\n  setPagination,\r\n  setCurrentJob,\r\n  clearError,\r\n  optimisticReorder,\r\n  rollbackReorder,\r\n} = jobsSlice.actions;\r\n\r\nexport default jobsSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAuB,kBAAkB;AAE/E,SAASC,GAAG,QAAQ,oBAAoB;AAoBxC,MAAMC,YAAuB,GAAG;EAC9BC,IAAI,EAAE,EAAE;EACRC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,UAAU,EAAE;IACVC,IAAI,EAAE,CAAC;IACPC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,CAAC;IACRC,UAAU,EAAE;EACd,CAAC;EACDC,OAAO,EAAE;IACPC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,EAAE;IACVC,IAAI,EAAE;EACR;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAGhB,gBAAgB,CACvC,gBAAgB,EAChB,OAAOiB,MAA8E,GAAG,CAAC,CAAC,KAAK;EAC7F,MAAMC,QAAQ,GAAG,MAAMjB,GAAG,CAACkB,OAAO,CAACF,MAAM,CAAC;EAC1C,OAAOC,QAAQ;AACjB,CACF,CAAC;AAED,OAAO,MAAME,SAAS,GAAGpB,gBAAgB,CACvC,gBAAgB,EAChB,MAAOqB,OAAoD,IAAK;EAC9D,MAAMH,QAAQ,GAAG,MAAMjB,GAAG,CAACmB,SAAS,CAACC,OAAO,CAAC;EAC7C,OAAOH,QAAQ;AACjB,CACF,CAAC;AAED,OAAO,MAAMI,SAAS,GAAGtB,gBAAgB,CACvC,gBAAgB,EAChB,OAAO;EAAEuB,EAAE;EAAEC;AAA+C,CAAC,KAAK;EAChE,MAAMN,QAAQ,GAAG,MAAMjB,GAAG,CAACqB,SAAS,CAACC,EAAE,EAAEC,OAAO,CAAC;EACjD,OAAON,QAAQ;AACjB,CACF,CAAC;AAED,OAAO,MAAMO,WAAW,GAAGzB,gBAAgB,CACzC,kBAAkB,EAClB,OAAO;EAAE0B,SAAS;EAAEC;AAAgD,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAC7F,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMjB,GAAG,CAACwB,WAAW,CAACC,SAAS,EAAEC,OAAO,CAAC;IAC1D,OAAOT,QAAQ;EACjB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACd,OAAOsB,eAAe,CAACtB,KAAK,CAAC;EAC/B;AACF,CACF,CAAC;AAED,MAAMuB,SAAS,GAAG9B,WAAW,CAAC;EAC5B+B,IAAI,EAAE,MAAM;EACZ5B,YAAY;EACZ6B,QAAQ,EAAE;IACRC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAoD,KAAK;MAC3ED,KAAK,CAACrB,OAAO,GAAG;QAAE,GAAGqB,KAAK,CAACrB,OAAO;QAAE,GAAGsB,MAAM,CAACC;MAAQ,CAAC;MACvD;MACAF,KAAK,CAAC1B,UAAU,CAACC,IAAI,GAAG,CAAC;IAC3B,CAAC;IACD4B,aAAa,EAAEA,CAACH,KAAK,EAAEC,MAAuD,KAAK;MACjFD,KAAK,CAAC1B,UAAU,GAAG;QAAE,GAAG0B,KAAK,CAAC1B,UAAU;QAAE,GAAG2B,MAAM,CAACC;MAAQ,CAAC;IAC/D,CAAC;IACDE,aAAa,EAAEA,CAACJ,KAAK,EAAEC,MAAiC,KAAK;MAC3DD,KAAK,CAAC7B,UAAU,GAAG8B,MAAM,CAACC,OAAO;IACnC,CAAC;IACDG,UAAU,EAAGL,KAAK,IAAK;MACrBA,KAAK,CAAC3B,KAAK,GAAG,IAAI;IACpB,CAAC;IACD;IACAiC,iBAAiB,EAAEA,CAACN,KAAK,EAAEC,MAA6D,KAAK;MAC3F,MAAM;QAAER,SAAS;QAAEC;MAAQ,CAAC,GAAGO,MAAM,CAACC,OAAO;MAC7C,MAAMhC,IAAI,GAAG,CAAC,GAAG8B,KAAK,CAAC9B,IAAI,CAAC;MAE5B,MAAMqC,SAAS,GAAGrC,IAAI,CAACsC,SAAS,CAACC,GAAG,IAAIA,GAAG,CAACC,KAAK,KAAKjB,SAAS,CAAC;MAChE,MAAMkB,OAAO,GAAGzC,IAAI,CAACsC,SAAS,CAACC,GAAG,IAAIA,GAAG,CAACC,KAAK,KAAKhB,OAAO,CAAC;MAE5D,IAAIa,SAAS,KAAK,CAAC,CAAC,IAAII,OAAO,KAAK,CAAC,CAAC,EAAE;QACtC,MAAM,CAACC,QAAQ,CAAC,GAAG1C,IAAI,CAAC2C,MAAM,CAACN,SAAS,EAAE,CAAC,CAAC;QAC5CrC,IAAI,CAAC2C,MAAM,CAACF,OAAO,EAAE,CAAC,EAAEC,QAAQ,CAAC;;QAEjC;QACA1C,IAAI,CAAC4C,OAAO,CAAC,CAACL,GAAG,EAAEM,KAAK,KAAK;UAC3BN,GAAG,CAACC,KAAK,GAAGK,KAAK,GAAG,CAAC;QACvB,CAAC,CAAC;QAEFf,KAAK,CAAC9B,IAAI,GAAGA,IAAI;MACnB;IACF,CAAC;IACD;IACA8C,eAAe,EAAEA,CAAChB,KAAK,EAAEC,MAA4B,KAAK;MACxDD,KAAK,CAAC9B,IAAI,GAAG+B,MAAM,CAACC,OAAO;IAC7B;EACF,CAAC;EACDe,aAAa,EAAGC,OAAO,IAAK;IAC1BA;IACE;IAAA,CACCC,OAAO,CAACpC,SAAS,CAACqC,OAAO,EAAGpB,KAAK,IAAK;MACrCA,KAAK,CAAC5B,OAAO,GAAG,IAAI;MACpB4B,KAAK,CAAC3B,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACD8C,OAAO,CAACpC,SAAS,CAACsC,SAAS,EAAE,CAACrB,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAAC5B,OAAO,GAAG,KAAK;MACrB4B,KAAK,CAAC9B,IAAI,GAAG+B,MAAM,CAACC,OAAO,CAACoB,IAAI,IAAI,EAAE;MACtCtB,KAAK,CAAC1B,UAAU,GAAG;QACjBC,IAAI,EAAE0B,MAAM,CAACC,OAAO,CAAC3B,IAAI,IAAI,CAAC;QAC9BC,QAAQ,EAAEyB,MAAM,CAACC,OAAO,CAAC1B,QAAQ,IAAI,EAAE;QACvCC,KAAK,EAAEwB,MAAM,CAACC,OAAO,CAACzB,KAAK,IAAI,CAAC;QAChCC,UAAU,EAAEuB,MAAM,CAACC,OAAO,CAACxB,UAAU,IAAI;MAC3C,CAAC;IACH,CAAC,CAAC,CACDyC,OAAO,CAACpC,SAAS,CAACwC,QAAQ,EAAE,CAACvB,KAAK,EAAEC,MAAM,KAAK;MAC9CD,KAAK,CAAC5B,OAAO,GAAG,KAAK;MACrB4B,KAAK,CAAC3B,KAAK,GAAG4B,MAAM,CAAC5B,KAAK,CAACmD,OAAO,IAAI,sBAAsB;IAC9D,CAAC;IACD;IAAA,CACCL,OAAO,CAAChC,SAAS,CAACkC,SAAS,EAAE,CAACrB,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAAC9B,IAAI,CAACuD,OAAO,CAACxB,MAAM,CAACC,OAAO,CAAC;MAClC;MACAF,KAAK,CAAC1B,UAAU,CAACG,KAAK,IAAI,CAAC;MAC3BuB,KAAK,CAAC1B,UAAU,CAACI,UAAU,GAAGgD,IAAI,CAACC,IAAI,CAAC3B,KAAK,CAAC1B,UAAU,CAACG,KAAK,GAAGuB,KAAK,CAAC1B,UAAU,CAACE,QAAQ,CAAC;IAC7F,CAAC,CAAC,CACD2C,OAAO,CAAChC,SAAS,CAACoC,QAAQ,EAAE,CAACvB,KAAK,EAAEC,MAAM,KAAK;MAC9CD,KAAK,CAAC3B,KAAK,GAAG4B,MAAM,CAAC5B,KAAK,CAACmD,OAAO,IAAI,sBAAsB;IAC9D,CAAC;IACD;IAAA,CACCL,OAAO,CAAC9B,SAAS,CAACgC,SAAS,EAAE,CAACrB,KAAK,EAAEC,MAAM,KAAK;MAAA,IAAA2B,iBAAA;MAC/C,MAAMb,KAAK,GAAGf,KAAK,CAAC9B,IAAI,CAACsC,SAAS,CAACC,GAAG,IAAIA,GAAG,CAACnB,EAAE,KAAKW,MAAM,CAACC,OAAO,CAACZ,EAAE,CAAC;MACvE,IAAIyB,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBf,KAAK,CAAC9B,IAAI,CAAC6C,KAAK,CAAC,GAAGd,MAAM,CAACC,OAAO;MACpC;MACA,IAAI,EAAA0B,iBAAA,GAAA5B,KAAK,CAAC7B,UAAU,cAAAyD,iBAAA,uBAAhBA,iBAAA,CAAkBtC,EAAE,MAAKW,MAAM,CAACC,OAAO,CAACZ,EAAE,EAAE;QAC9CU,KAAK,CAAC7B,UAAU,GAAG8B,MAAM,CAACC,OAAO;MACnC;IACF,CAAC;IACD;IAAA,CACCiB,OAAO,CAAC3B,WAAW,CAAC+B,QAAQ,EAAE,CAACvB,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAAC3B,KAAK,GAAG,2CAA2C;IAC3D,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACX0B,UAAU;EACVI,aAAa;EACbC,aAAa;EACbC,UAAU;EACVC,iBAAiB;EACjBU;AACF,CAAC,GAAGpB,SAAS,CAACiC,OAAO;AAErB,eAAejC,SAAS,CAACkC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}