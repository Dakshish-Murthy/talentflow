{"ast":null,"code":"import { db } from '../services/database';\nconst jobTitles = ['Frontend Developer', 'Backend Developer', 'Full Stack Developer', 'DevOps Engineer', 'UX Designer', 'Product Manager', 'Data Scientist', 'ML Engineer', 'Mobile Developer', 'QA Engineer', 'Technical Lead', 'Software Architect'];\nconst companies = ['TechCorp', 'InnovateInc', 'DigitalSolutions', 'CloudSystems', 'DataWorks', 'WebCraft', 'AppFactory', 'CodeMasters'];\nconst locations = ['New York, NY', 'San Francisco, CA', 'Austin, TX', 'Seattle, WA', 'Boston, MA', 'Denver, CO', 'Chicago, IL', 'Remote'];\nconst skills = ['React', 'TypeScript', 'Node.js', 'Python', 'AWS', 'Docker', 'Kubernetes', 'GraphQL', 'MongoDB', 'PostgreSQL', 'Redis', 'Jenkins', 'Terraform', 'Machine Learning', 'UI/UX'];\n\n// Generate 1000 unique names\nconst generateNames = count => {\n  const firstNames = ['John', 'Jane', 'Robert', 'Emily', 'Michael', 'Sarah', 'David', 'Lisa', 'James', 'Jennifer', 'William', 'Maria', 'Richard', 'Susan', 'Thomas', 'Karen'];\n  const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez', 'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson'];\n  const names = new Set();\n  while (names.size < count) {\n    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\n    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\n    names.add(`${firstName} ${lastName}`);\n  }\n  return Array.from(names);\n};\nconst generateEmail = name => {\n  return name.toLowerCase().replace(' ', '.') + '@example.com';\n};\nexport const seedDatabase = async () => {\n  try {\n    // Clear existing data\n    await Promise.all([db.jobs.clear(), db.candidates.clear(), db.assessments.clear(), db.responses.clear()]);\n\n    // Generate jobs\n    const jobs = [];\n    for (let i = 0; i < 25; i++) {\n      const title = jobTitles[Math.floor(Math.random() * jobTitles.length)];\n      const company = companies[Math.floor(Math.random() * companies.length)];\n      const location = locations[Math.floor(Math.random() * locations.length)];\n\n      // Generate unique tags\n      const tagSet = new Set();\n      while (tagSet.size < 3) {\n        tagSet.add(skills[Math.floor(Math.random() * skills.length)]);\n      }\n      const job = {\n        id: `job-${i + 1}`,\n        title: `${title}`,\n        slug: `${title.toLowerCase().replace(/ /g, '-')}-${company.toLowerCase()}-${i + 1}`,\n        status: Math.random() > 0.3 ? 'active' : 'archived',\n        tags: Array.from(tagSet),\n        order: i + 1,\n        description: `We are looking for a skilled ${title} to join our team at ${company}. This position offers competitive compensation and excellent growth opportunities.`,\n        salary: `$${Math.floor(Math.random() * 100000) + 50000}`,\n        location,\n        company,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      jobs.push(job);\n    }\n\n    // Generate candidates\n    const candidates = [];\n    const stages = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\n    const names = generateNames(1000);\n    for (let i = 0; i < 1000; i++) {\n      const name = names[i];\n      const job = jobs[Math.floor(Math.random() * jobs.length)];\n      const candidate = {\n        id: `candidate-${i + 1}`,\n        name,\n        email: generateEmail(name),\n        phone: `+1${Math.floor(Math.random() * 1000000000).toString().padStart(10, '0')}`,\n        stage: stages[Math.floor(Math.random() * stages.length)],\n        jobId: job.id,\n        jobTitle: job.title,\n        appliedDate: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),\n        location: locations[Math.floor(Math.random() * locations.length)],\n        experience: `${Math.floor(Math.random() * 10) + 1} years`,\n        skills: Array.from(new Set(Array.from({\n          length: Math.floor(Math.random() * 5) + 2\n        }, () => skills[Math.floor(Math.random() * skills.length)]))),\n        notes: []\n      };\n      candidates.push(candidate);\n    }\n\n    // Generate assessments\n    const assessments = [];\n    const questionTypes = ['single-choice', 'multi-choice', 'short-text', 'long-text', 'numeric'];\n    for (let i = 0; i < 3; i++) {\n      const job = jobs[i];\n      const sections = [];\n      for (let s = 0; s < 3; s++) {\n        const questions = [];\n        for (let q = 0; q < 4; q++) {\n          questions.push({\n            id: `q-${s}-${q}`,\n            type: questionTypes[Math.floor(Math.random() * questionTypes.length)],\n            question: `Sample question ${q + 1} for section ${s + 1} about ${job.title}`,\n            required: Math.random() > 0.5,\n            options: ['Option 1', 'Option 2', 'Option 3', 'Option 4'],\n            maxLength: 500\n          });\n        }\n        sections.push({\n          id: `section-${s}`,\n          title: `Technical Section ${s + 1}`,\n          questions\n        });\n      }\n      assessments.push({\n        id: `assessment-${i + 1}`,\n        jobId: job.id,\n        title: `Technical Assessment - ${job.title}`,\n        description: 'Please complete this assessment to proceed with your application. This will help us evaluate your technical skills.',\n        sections,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n    }\n\n    // Add to database in transaction\n    await db.transaction('rw', db.jobs, db.candidates, db.assessments, async () => {\n      await db.jobs.bulkAdd(jobs);\n      await db.candidates.bulkAdd(candidates);\n      await db.assessments.bulkAdd(assessments);\n    });\n    console.log('Database seeded successfully with:', {\n      jobs: jobs.length,\n      candidates: candidates.length,\n      assessments: assessments.length\n    });\n  } catch (error) {\n    console.error('Error seeding database:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["db","jobTitles","companies","locations","skills","generateNames","count","firstNames","lastNames","names","Set","size","firstName","Math","floor","random","length","lastName","add","Array","from","generateEmail","name","toLowerCase","replace","seedDatabase","Promise","all","jobs","clear","candidates","assessments","responses","i","title","company","location","tagSet","job","id","slug","status","tags","order","description","salary","createdAt","Date","updatedAt","push","stages","candidate","email","phone","toString","padStart","stage","jobId","jobTitle","appliedDate","now","experience","notes","questionTypes","sections","s","questions","q","type","question","required","options","maxLength","transaction","bulkAdd","console","log","error"],"sources":["C:/Users/Dakshish/talentflow/src/data/seed.ts"],"sourcesContent":["import { Job, Candidate, Assessment } from '../types';\r\nimport { db } from '../services/database';\r\n\r\nconst jobTitles = [\r\n  'Frontend Developer', 'Backend Developer', 'Full Stack Developer',\r\n  'DevOps Engineer', 'UX Designer', 'Product Manager',\r\n  'Data Scientist', 'ML Engineer', 'Mobile Developer',\r\n  'QA Engineer', 'Technical Lead', 'Software Architect'\r\n];\r\n\r\nconst companies = [\r\n  'TechCorp', 'InnovateInc', 'DigitalSolutions', 'CloudSystems',\r\n  'DataWorks', 'WebCraft', 'AppFactory', 'CodeMasters'\r\n];\r\n\r\nconst locations = [\r\n  'New York, NY', 'San Francisco, CA', 'Austin, TX', 'Seattle, WA',\r\n  'Boston, MA', 'Denver, CO', 'Chicago, IL', 'Remote'\r\n];\r\n\r\nconst skills = [\r\n  'React', 'TypeScript', 'Node.js', 'Python', 'AWS', 'Docker',\r\n  'Kubernetes', 'GraphQL', 'MongoDB', 'PostgreSQL', 'Redis',\r\n  'Jenkins', 'Terraform', 'Machine Learning', 'UI/UX'\r\n];\r\n\r\n// Generate 1000 unique names\r\nconst generateNames = (count: number) => {\r\n  const firstNames = ['John', 'Jane', 'Robert', 'Emily', 'Michael', 'Sarah', 'David', 'Lisa', 'James', 'Jennifer', 'William', 'Maria', 'Richard', 'Susan', 'Thomas', 'Karen'];\r\n  const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez', 'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson'];\r\n  \r\n  const names = new Set<string>();\r\n  while (names.size < count) {\r\n    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r\n    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r\n    names.add(`${firstName} ${lastName}`);\r\n  }\r\n  return Array.from(names);\r\n};\r\n\r\nconst generateEmail = (name: string) => {\r\n  return name.toLowerCase().replace(' ', '.') + '@example.com';\r\n};\r\n\r\nexport const seedDatabase = async () => {\r\n  try {\r\n    // Clear existing data\r\n    await Promise.all([\r\n      db.jobs.clear(),\r\n      db.candidates.clear(),\r\n      db.assessments.clear(),\r\n      db.responses.clear()\r\n    ]);\r\n\r\n    // Generate jobs\r\n    const jobs: Job[] = [];\r\n    for (let i = 0; i < 25; i++) {\r\n      const title = jobTitles[Math.floor(Math.random() * jobTitles.length)];\r\n      const company = companies[Math.floor(Math.random() * companies.length)];\r\n      const location = locations[Math.floor(Math.random() * locations.length)];\r\n      \r\n      // Generate unique tags\r\n      const tagSet = new Set<string>();\r\n      while (tagSet.size < 3) {\r\n        tagSet.add(skills[Math.floor(Math.random() * skills.length)]);\r\n      }\r\n      \r\n      const job: Job = {\r\n        id: `job-${i + 1}`,\r\n        title: `${title}`,\r\n        slug: `${title.toLowerCase().replace(/ /g, '-')}-${company.toLowerCase()}-${i + 1}`,\r\n        status: Math.random() > 0.3 ? 'active' : 'archived',\r\n        tags: Array.from(tagSet),\r\n        order: i + 1,\r\n        description: `We are looking for a skilled ${title} to join our team at ${company}. This position offers competitive compensation and excellent growth opportunities.`,\r\n        salary: `$${Math.floor(Math.random() * 100000) + 50000}`,\r\n        location,\r\n        company,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      };\r\n      jobs.push(job);\r\n    }\r\n\r\n    // Generate candidates\r\n    const candidates: Candidate[] = [];\r\n    const stages: Candidate['stage'][] = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\r\n    const names = generateNames(1000);\r\n    \r\n    for (let i = 0; i < 1000; i++) {\r\n      const name = names[i];\r\n      const job = jobs[Math.floor(Math.random() * jobs.length)];\r\n      \r\n      const candidate: Candidate = {\r\n        id: `candidate-${i + 1}`,\r\n        name,\r\n        email: generateEmail(name),\r\n        phone: `+1${Math.floor(Math.random() * 1000000000).toString().padStart(10, '0')}`,\r\n        stage: stages[Math.floor(Math.random() * stages.length)],\r\n        jobId: job.id,\r\n        jobTitle: job.title,\r\n        appliedDate: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),\r\n        location: locations[Math.floor(Math.random() * locations.length)],\r\n        experience: `${Math.floor(Math.random() * 10) + 1} years`,\r\n        skills: Array.from(new Set(Array.from({ length: Math.floor(Math.random() * 5) + 2 }, () => \r\n          skills[Math.floor(Math.random() * skills.length)]\r\n        ))),\r\n        notes: []\r\n      };\r\n      candidates.push(candidate);\r\n    }\r\n\r\n    // Generate assessments\r\n    const assessments: Assessment[] = [];\r\n    const questionTypes: any[] = ['single-choice', 'multi-choice', 'short-text', 'long-text', 'numeric'];\r\n    \r\n    for (let i = 0; i < 3; i++) {\r\n      const job = jobs[i];\r\n      const sections = [];\r\n      \r\n      for (let s = 0; s < 3; s++) {\r\n        const questions = [];\r\n        for (let q = 0; q < 4; q++) {\r\n          questions.push({\r\n            id: `q-${s}-${q}`,\r\n            type: questionTypes[Math.floor(Math.random() * questionTypes.length)],\r\n            question: `Sample question ${q + 1} for section ${s + 1} about ${job.title}`,\r\n            required: Math.random() > 0.5,\r\n            options: ['Option 1', 'Option 2', 'Option 3', 'Option 4'],\r\n            maxLength: 500\r\n          });\r\n        }\r\n        sections.push({\r\n          id: `section-${s}`,\r\n          title: `Technical Section ${s + 1}`,\r\n          questions\r\n        });\r\n      }\r\n      \r\n      assessments.push({\r\n        id: `assessment-${i + 1}`,\r\n        jobId: job.id,\r\n        title: `Technical Assessment - ${job.title}`,\r\n        description: 'Please complete this assessment to proceed with your application. This will help us evaluate your technical skills.',\r\n        sections,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      });\r\n    }\r\n\r\n    // Add to database in transaction\r\n    await db.transaction('rw', db.jobs, db.candidates, db.assessments, async () => {\r\n      await db.jobs.bulkAdd(jobs);\r\n      await db.candidates.bulkAdd(candidates);\r\n      await db.assessments.bulkAdd(assessments);\r\n    });\r\n\r\n    console.log('Database seeded successfully with:', {\r\n      jobs: jobs.length,\r\n      candidates: candidates.length,\r\n      assessments: assessments.length\r\n    });\r\n  } catch (error) {\r\n    console.error('Error seeding database:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}