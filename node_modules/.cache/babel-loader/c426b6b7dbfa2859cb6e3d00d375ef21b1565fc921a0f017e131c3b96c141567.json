{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { useAppDispatch, useAppSelector } from './redux';\nimport { fetchJobs, createJob, updateJob, reorderJobs, setFilters, setPagination, setCurrentJob, optimisticReorder, rollbackReorder } from '../store/slices/jobsSlice';\nexport const useJobs = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  const {\n    jobs,\n    currentJob,\n    loading,\n    error,\n    pagination,\n    filters\n  } = useAppSelector(state => state.jobs);\n  const loadJobs = useCallback(async params => {\n    return dispatch(fetchJobs(params));\n  }, [dispatch]);\n  const addJob = useCallback(jobData => {\n    return dispatch(createJob(jobData));\n  }, [dispatch]);\n  const editJob = useCallback((id, updates) => {\n    return dispatch(updateJob({\n      id,\n      updates\n    }));\n  }, [dispatch]);\n  const archiveJob = useCallback(id => {\n    return dispatch(updateJob({\n      id,\n      updates: {\n        status: 'archived'\n      }\n    }));\n  }, [dispatch]);\n  const activateJob = useCallback(id => {\n    return dispatch(updateJob({\n      id,\n      updates: {\n        status: 'active'\n      }\n    }));\n  }, [dispatch]);\n  const handleReorder = useCallback(async (fromOrder, toOrder) => {\n    const originalJobs = [...jobs];\n\n    // Optimistic update\n    dispatch(optimisticReorder({\n      fromOrder,\n      toOrder\n    }));\n    try {\n      await dispatch(reorderJobs({\n        fromOrder,\n        toOrder\n      })).unwrap();\n    } catch (error) {\n      // Rollback on failure\n      dispatch(rollbackReorder(originalJobs));\n      throw error;\n    }\n  }, [dispatch, jobs]);\n  const updateFilters = useCallback(newFilters => {\n    dispatch(setFilters(newFilters));\n  }, [dispatch]);\n  const updatePagination = useCallback(newPagination => {\n    dispatch(setPagination(newPagination));\n  }, [dispatch]);\n  const selectJob = useCallback(job => {\n    dispatch(setCurrentJob(job));\n  }, [dispatch]);\n\n  // Helper method to get active jobs\n  const getActiveJobs = useCallback(() => {\n    return jobs.filter(job => job.status === 'active');\n  }, [jobs]);\n  return {\n    // State\n    jobs,\n    currentJob,\n    loading,\n    error,\n    pagination,\n    filters,\n    // Computed values\n    activeJobs: getActiveJobs(),\n    // Actions\n    loadJobs,\n    addJob,\n    editJob,\n    archiveJob,\n    activateJob,\n    handleReorder,\n    updateFilters,\n    updatePagination,\n    selectJob\n  };\n};\n_s(useJobs, \"gBI+gIm/1otOB8KD+6G09TilTwk=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});","map":{"version":3,"names":["useCallback","useAppDispatch","useAppSelector","fetchJobs","createJob","updateJob","reorderJobs","setFilters","setPagination","setCurrentJob","optimisticReorder","rollbackReorder","useJobs","_s","dispatch","jobs","currentJob","loading","error","pagination","filters","state","loadJobs","params","addJob","jobData","editJob","id","updates","archiveJob","status","activateJob","handleReorder","fromOrder","toOrder","originalJobs","unwrap","updateFilters","newFilters","updatePagination","newPagination","selectJob","job","getActiveJobs","filter","activeJobs"],"sources":["C:/Users/Dakshish/talentflow/src/hooks/useJobs.ts"],"sourcesContent":["import { useCallback, useRef } from 'react';\r\nimport { useAppDispatch, useAppSelector } from './redux';\r\nimport {\r\n  fetchJobs,\r\n  createJob,\r\n  updateJob,\r\n  reorderJobs,\r\n  setFilters,\r\n  setPagination,\r\n  setCurrentJob,\r\n  optimisticReorder,\r\n  rollbackReorder,\r\n} from '../store/slices/jobsSlice';\r\nimport { Job } from '../types';\r\n\r\nexport const useJobs = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { jobs, currentJob, loading, error, pagination, filters } = useAppSelector(\r\n    (state) => state.jobs\r\n  );\r\n\r\n  const loadJobs = useCallback(async (params?: any) => {\r\n    return dispatch(fetchJobs(params));\r\n  }, [dispatch]);\r\n\r\n  const addJob = useCallback((jobData: Omit<Job, 'id' | 'createdAt' | 'updatedAt'>) => {\r\n    return dispatch(createJob(jobData));\r\n  }, [dispatch]);\r\n\r\n  const editJob = useCallback((id: string, updates: Partial<Job>) => {\r\n    return dispatch(updateJob({ id, updates }));\r\n  }, [dispatch]);\r\n\r\n  const archiveJob = useCallback((id: string) => {\r\n    return dispatch(updateJob({ id, updates: { status: 'archived' as const } }));\r\n  }, [dispatch]);\r\n\r\n  const activateJob = useCallback((id: string) => {\r\n    return dispatch(updateJob({ id, updates: { status: 'active' as const } }));\r\n  }, [dispatch]);\r\n\r\n  const handleReorder = useCallback(async (fromOrder: number, toOrder: number) => {\r\n    const originalJobs = [...jobs];\r\n    \r\n    // Optimistic update\r\n    dispatch(optimisticReorder({ fromOrder, toOrder }));\r\n    \r\n    try {\r\n      await dispatch(reorderJobs({ fromOrder, toOrder })).unwrap();\r\n    } catch (error) {\r\n      // Rollback on failure\r\n      dispatch(rollbackReorder(originalJobs));\r\n      throw error;\r\n    }\r\n  }, [dispatch, jobs]);\r\n\r\n  const updateFilters = useCallback((newFilters: Partial<typeof filters>) => {\r\n    dispatch(setFilters(newFilters));\r\n  }, [dispatch]);\r\n\r\n  const updatePagination = useCallback((newPagination: Partial<typeof pagination>) => {\r\n    dispatch(setPagination(newPagination));\r\n  }, [dispatch]);\r\n\r\n  const selectJob = useCallback((job: Job | null) => {\r\n    dispatch(setCurrentJob(job));\r\n  }, [dispatch]);\r\n\r\n  // Helper method to get active jobs\r\n  const getActiveJobs = useCallback(() => {\r\n    return jobs.filter(job => job.status === 'active');\r\n  }, [jobs]);\r\n\r\n  return {\r\n    // State\r\n    jobs,\r\n    currentJob,\r\n    loading,\r\n    error,\r\n    pagination,\r\n    filters,\r\n    \r\n    // Computed values\r\n    activeJobs: getActiveJobs(),\r\n    \r\n    // Actions\r\n    loadJobs,\r\n    addJob,\r\n    editJob,\r\n    archiveJob,\r\n    activateJob,\r\n    handleReorder,\r\n    updateFilters,\r\n    updatePagination,\r\n    selectJob,\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}