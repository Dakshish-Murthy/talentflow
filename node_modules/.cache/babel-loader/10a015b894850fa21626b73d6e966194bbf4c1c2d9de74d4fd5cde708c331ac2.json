{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { useAppDispatch, useAppSelector } from './redux';\nimport { fetchAssessment, createAssessment, updateAssessment, submitResponse, setCurrentAssessment, updateCurrentAssessment, togglePreviewMode, clearError } from '../store/slices/assessmentsSlice';\nexport const useAssessments = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  const {\n    currentAssessment,\n    loading,\n    error,\n    previewMode\n  } = useAppSelector(state => state.assessments);\n  const loadAssessment = useCallback(jobId => {\n    return dispatch(fetchAssessment(jobId));\n  }, [dispatch]);\n  const createNewAssessment = useCallback((jobId, title) => {\n    return dispatch(createAssessment({\n      jobId,\n      assessmentData: {\n        title,\n        description: '',\n        sections: []\n      }\n    }));\n  }, [dispatch]);\n  const saveCurrentAssessment = useCallback(() => {\n    if (!currentAssessment) return Promise.reject(new Error('No assessment to save'));\n    return dispatch(updateAssessment({\n      jobId: currentAssessment.jobId,\n      assessmentData: currentAssessment\n    }));\n  }, [dispatch, currentAssessment]);\n  const handleUpdateAssessment = useCallback(updates => {\n    dispatch(updateCurrentAssessment(updates));\n  }, [dispatch]);\n  const handleSubmitResponse = useCallback((assessmentId, response) => {\n    return dispatch(submitResponse({\n      assessmentId,\n      response\n    }));\n  }, [dispatch]);\n  const handleTogglePreviewMode = useCallback(() => {\n    dispatch(togglePreviewMode());\n  }, [dispatch]);\n  const handleClearError = useCallback(() => {\n    dispatch(clearError());\n  }, [dispatch]);\n  const handleSetCurrentAssessment = useCallback(assessment => {\n    dispatch(setCurrentAssessment(assessment));\n  }, [dispatch]);\n  return {\n    // State\n    currentAssessment,\n    loading,\n    error,\n    previewMode,\n    // Actions\n    loadAssessment,\n    createNewAssessment,\n    saveCurrentAssessment,\n    handleUpdateAssessment,\n    handleSubmitResponse,\n    togglePreviewMode: handleTogglePreviewMode,\n    clearError: handleClearError,\n    setCurrentAssessment: handleSetCurrentAssessment\n  };\n};\n_s(useAssessments, \"T17l4LAHMS1O/u6lz6EeY48QxuQ=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});","map":{"version":3,"names":["useCallback","useAppDispatch","useAppSelector","fetchAssessment","createAssessment","updateAssessment","submitResponse","setCurrentAssessment","updateCurrentAssessment","togglePreviewMode","clearError","useAssessments","_s","dispatch","currentAssessment","loading","error","previewMode","state","assessments","loadAssessment","jobId","createNewAssessment","title","assessmentData","description","sections","saveCurrentAssessment","Promise","reject","Error","handleUpdateAssessment","updates","handleSubmitResponse","assessmentId","response","handleTogglePreviewMode","handleClearError","handleSetCurrentAssessment","assessment"],"sources":["C:/Users/Dakshish/talentflow/src/hooks/useAssessments.ts"],"sourcesContent":["import { useCallback } from 'react';\r\nimport { useAppDispatch, useAppSelector } from './redux';\r\nimport {\r\n  fetchAssessment,\r\n  createAssessment,\r\n  updateAssessment,\r\n  submitResponse,\r\n  setCurrentAssessment,\r\n  updateCurrentAssessment,\r\n  togglePreviewMode,\r\n  clearError,\r\n} from '../store/slices/assessmentsSlice';\r\nimport { Assessment } from '../types';\r\n\r\nexport const useAssessments = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { currentAssessment, loading, error, previewMode } = useAppSelector(\r\n    (state) => state.assessments\r\n  );\r\n\r\n  const loadAssessment = useCallback((jobId: string) => {\r\n    return dispatch(fetchAssessment(jobId));\r\n  }, [dispatch]);\r\n\r\n  const createNewAssessment = useCallback((jobId: string, title: string) => {\r\n    return dispatch(createAssessment({ \r\n      jobId, \r\n      assessmentData: { \r\n        title,\r\n        description: '',\r\n        sections: []\r\n      } \r\n    }));\r\n  }, [dispatch]);\r\n\r\n  const saveCurrentAssessment = useCallback(() => {\r\n    if (!currentAssessment) return Promise.reject(new Error('No assessment to save'));\r\n    \r\n    return dispatch(updateAssessment({\r\n      jobId: currentAssessment.jobId,\r\n      assessmentData: currentAssessment\r\n    }));\r\n  }, [dispatch, currentAssessment]);\r\n\r\n  const handleUpdateAssessment = useCallback((updates: Partial<Assessment>) => {\r\n    dispatch(updateCurrentAssessment(updates));\r\n  }, [dispatch]);\r\n\r\n  const handleSubmitResponse = useCallback((assessmentId: string, response: any) => {\r\n    return dispatch(submitResponse({ assessmentId, response }));\r\n  }, [dispatch]);\r\n\r\n  const handleTogglePreviewMode = useCallback(() => {\r\n    dispatch(togglePreviewMode());\r\n  }, [dispatch]);\r\n\r\n  const handleClearError = useCallback(() => {\r\n    dispatch(clearError());\r\n  }, [dispatch]);\r\n\r\n  const handleSetCurrentAssessment = useCallback((assessment: Assessment | null) => {\r\n    dispatch(setCurrentAssessment(assessment));\r\n  }, [dispatch]);\r\n\r\n  return {\r\n    // State\r\n    currentAssessment,\r\n    loading,\r\n    error,\r\n    previewMode,\r\n    \r\n    // Actions\r\n    loadAssessment,\r\n    createNewAssessment,\r\n    saveCurrentAssessment,\r\n    handleUpdateAssessment,\r\n    handleSubmitResponse,\r\n    togglePreviewMode: handleTogglePreviewMode,\r\n    clearError: handleClearError,\r\n    setCurrentAssessment: handleSetCurrentAssessment,\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}