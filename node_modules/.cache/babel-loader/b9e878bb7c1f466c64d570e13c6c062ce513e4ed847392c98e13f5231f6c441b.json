{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { useAppDispatch, useAppSelector } from './redux';\nimport { fetchAssessment, createAssessment, updateAssessment, submitResponse, updateCurrentAssessment, setCurrentResponse, updateCurrentResponse, updateResponseAnswer, togglePreviewMode, setValidationError, clearValidationError, clearAllValidationErrors, clearError, addSection, updateSection, removeSection, addQuestion, updateQuestion, removeQuestion } from '../store/slices/assessmentsSlice';\nexport const useAssessments = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  const {\n    currentAssessment,\n    currentResponse,\n    loading,\n    error,\n    previewMode,\n    validationErrors\n  } = useAppSelector(state => state.assessments);\n  const loadAssessment = useCallback(jobId => {\n    return dispatch(fetchAssessment(jobId));\n  }, [dispatch]);\n  const createNewAssessment = useCallback((jobId, title) => {\n    return dispatch(createAssessment({\n      jobId,\n      assessmentData: {\n        title,\n        description: '',\n        sections: []\n      }\n    }));\n  }, [dispatch]);\n  const saveCurrentAssessment = useCallback(() => {\n    if (!currentAssessment) return Promise.reject(new Error('No assessment to save'));\n    return dispatch(updateAssessment({\n      jobId: currentAssessment.jobId,\n      assessmentData: currentAssessment\n    }));\n  }, [dispatch, currentAssessment]);\n  const handleUpdateAssessment = useCallback(updates => {\n    dispatch(updateCurrentAssessment(updates));\n  }, [dispatch]);\n  const handleSubmitResponse = useCallback((assessmentId, response) => {\n    return dispatch(submitResponse({\n      assessmentId,\n      response\n    }));\n  }, [dispatch]);\n  const handleSetCurrentResponse = useCallback(response => {\n    dispatch(setCurrentResponse(response));\n  }, [dispatch]);\n  const handleUpdateResponse = useCallback(updates => {\n    dispatch(updateCurrentResponse(updates));\n  }, [dispatch]);\n  const handleUpdateResponseAnswer = useCallback((questionId, answer) => {\n    dispatch(updateResponseAnswer({\n      questionId,\n      answer\n    }));\n  }, [dispatch]);\n  const handleTogglePreviewMode = useCallback(() => {\n    dispatch(togglePreviewMode());\n  }, [dispatch]);\n  const handleSetValidationError = useCallback((questionId, error) => {\n    dispatch(setValidationError({\n      questionId,\n      error\n    }));\n  }, [dispatch]);\n  const handleClearValidationError = useCallback(questionId => {\n    dispatch(clearValidationError(questionId));\n  }, [dispatch]);\n  const handleClearAllValidationErrors = useCallback(() => {\n    dispatch(clearAllValidationErrors());\n  }, [dispatch]);\n  const handleClearError = useCallback(() => {\n    dispatch(clearError());\n  }, [dispatch]);\n\n  // Section management\n  const handleAddSection = useCallback(section => {\n    dispatch(addSection({\n      section\n    }));\n  }, [dispatch]);\n  const handleUpdateSection = useCallback((sectionId, updates) => {\n    dispatch(updateSection({\n      sectionId,\n      updates\n    }));\n  }, [dispatch]);\n  const handleRemoveSection = useCallback(sectionId => {\n    dispatch(removeSection(sectionId));\n  }, [dispatch]);\n\n  // Question management\n  const handleAddQuestion = useCallback((sectionId, question) => {\n    dispatch(addQuestion({\n      sectionId,\n      question\n    }));\n  }, [dispatch]);\n  const handleUpdateQuestion = useCallback((sectionId, questionId, updates) => {\n    dispatch(updateQuestion({\n      sectionId,\n      questionId,\n      updates\n    }));\n  }, [dispatch]);\n  const handleRemoveQuestion = useCallback((sectionId, questionId) => {\n    dispatch(removeQuestion({\n      sectionId,\n      questionId\n    }));\n  }, [dispatch]);\n  return {\n    // State\n    currentAssessment,\n    currentResponse,\n    loading,\n    error,\n    previewMode,\n    validationErrors,\n    // Actions\n    loadAssessment,\n    createNewAssessment,\n    saveCurrentAssessment,\n    handleUpdateAssessment,\n    handleSubmitResponse,\n    handleSetCurrentResponse,\n    handleUpdateResponse,\n    handleUpdateResponseAnswer,\n    togglePreviewMode: handleTogglePreviewMode,\n    handleSetValidationError,\n    handleClearValidationError,\n    handleClearAllValidationErrors,\n    clearError: handleClearError,\n    setCurrentAssessment: handleSetCurrentResponse,\n    // Section management\n    handleAddSection,\n    handleUpdateSection,\n    handleRemoveSection,\n    // Question management\n    handleAddQuestion,\n    handleUpdateQuestion,\n    handleRemoveQuestion\n  };\n};\n_s(useAssessments, \"hYx7e2CtjwqvB5rrQQWpledpxOM=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});","map":{"version":3,"names":["useCallback","useAppDispatch","useAppSelector","fetchAssessment","createAssessment","updateAssessment","submitResponse","updateCurrentAssessment","setCurrentResponse","updateCurrentResponse","updateResponseAnswer","togglePreviewMode","setValidationError","clearValidationError","clearAllValidationErrors","clearError","addSection","updateSection","removeSection","addQuestion","updateQuestion","removeQuestion","useAssessments","_s","dispatch","currentAssessment","currentResponse","loading","error","previewMode","validationErrors","state","assessments","loadAssessment","jobId","createNewAssessment","title","assessmentData","description","sections","saveCurrentAssessment","Promise","reject","Error","handleUpdateAssessment","updates","handleSubmitResponse","assessmentId","response","handleSetCurrentResponse","handleUpdateResponse","handleUpdateResponseAnswer","questionId","answer","handleTogglePreviewMode","handleSetValidationError","handleClearValidationError","handleClearAllValidationErrors","handleClearError","handleAddSection","section","handleUpdateSection","sectionId","handleRemoveSection","handleAddQuestion","question","handleUpdateQuestion","handleRemoveQuestion","setCurrentAssessment"],"sources":["C:/Users/Dakshish/talentflow/src/hooks/useAssessments.ts"],"sourcesContent":["import { useCallback } from 'react';\r\nimport { useAppDispatch, useAppSelector } from './redux';\r\nimport {\r\n  fetchAssessment,\r\n  createAssessment,\r\n  updateAssessment,\r\n  submitResponse,\r\n  setCurrentAssessment,\r\n  updateCurrentAssessment,\r\n  setCurrentResponse,\r\n  updateCurrentResponse,\r\n  updateResponseAnswer,\r\n  togglePreviewMode,\r\n  setValidationError,\r\n  clearValidationError,\r\n  clearAllValidationErrors,\r\n  clearError,\r\n  addSection,\r\n  updateSection,\r\n  removeSection,\r\n  addQuestion,\r\n  updateQuestion,\r\n  removeQuestion,\r\n} from '../store/slices/assessmentsSlice';\r\nimport { Assessment, AssessmentResponse } from '../types';\r\n\r\nexport const useAssessments = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { \r\n    currentAssessment, \r\n    currentResponse, \r\n    loading, \r\n    error, \r\n    previewMode,\r\n    validationErrors \r\n  } = useAppSelector((state) => state.assessments);\r\n\r\n  const loadAssessment = useCallback((jobId: string) => {\r\n    return dispatch(fetchAssessment(jobId));\r\n  }, [dispatch]);\r\n\r\n  const createNewAssessment = useCallback((jobId: string, title: string) => {\r\n    return dispatch(createAssessment({ \r\n      jobId, \r\n      assessmentData: { \r\n        title,\r\n        description: '',\r\n        sections: []\r\n      } \r\n    }));\r\n  }, [dispatch]);\r\n\r\n  const saveCurrentAssessment = useCallback(() => {\r\n    if (!currentAssessment) return Promise.reject(new Error('No assessment to save'));\r\n    \r\n    return dispatch(updateAssessment({\r\n      jobId: currentAssessment.jobId,\r\n      assessmentData: currentAssessment\r\n    }));\r\n  }, [dispatch, currentAssessment]);\r\n\r\n  const handleUpdateAssessment = useCallback((updates: Partial<Assessment>) => {\r\n    dispatch(updateCurrentAssessment(updates));\r\n  }, [dispatch]);\r\n\r\n  const handleSubmitResponse = useCallback((assessmentId: string, response: any) => {\r\n    return dispatch(submitResponse({ assessmentId, response }));\r\n  }, [dispatch]);\r\n\r\n  const handleSetCurrentResponse = useCallback((response: AssessmentResponse | null) => {\r\n    dispatch(setCurrentResponse(response));\r\n  }, [dispatch]);\r\n\r\n  const handleUpdateResponse = useCallback((updates: Partial<AssessmentResponse>) => {\r\n    dispatch(updateCurrentResponse(updates));\r\n  }, [dispatch]);\r\n\r\n  const handleUpdateResponseAnswer = useCallback((questionId: string, answer: any) => {\r\n    dispatch(updateResponseAnswer({ questionId, answer }));\r\n  }, [dispatch]);\r\n\r\n  const handleTogglePreviewMode = useCallback(() => {\r\n    dispatch(togglePreviewMode());\r\n  }, [dispatch]);\r\n\r\n  const handleSetValidationError = useCallback((questionId: string, error: string) => {\r\n    dispatch(setValidationError({ questionId, error }));\r\n  }, [dispatch]);\r\n\r\n  const handleClearValidationError = useCallback((questionId: string) => {\r\n    dispatch(clearValidationError(questionId));\r\n  }, [dispatch]);\r\n\r\n  const handleClearAllValidationErrors = useCallback(() => {\r\n    dispatch(clearAllValidationErrors());\r\n  }, [dispatch]);\r\n\r\n  const handleClearError = useCallback(() => {\r\n    dispatch(clearError());\r\n  }, [dispatch]);\r\n\r\n  // Section management\r\n  const handleAddSection = useCallback((section: any) => {\r\n    dispatch(addSection({ section }));\r\n  }, [dispatch]);\r\n\r\n  const handleUpdateSection = useCallback((sectionId: string, updates: any) => {\r\n    dispatch(updateSection({ sectionId, updates }));\r\n  }, [dispatch]);\r\n\r\n  const handleRemoveSection = useCallback((sectionId: string) => {\r\n    dispatch(removeSection(sectionId));\r\n  }, [dispatch]);\r\n\r\n  // Question management\r\n  const handleAddQuestion = useCallback((sectionId: string, question: any) => {\r\n    dispatch(addQuestion({ sectionId, question }));\r\n  }, [dispatch]);\r\n\r\n  const handleUpdateQuestion = useCallback((sectionId: string, questionId: string, updates: any) => {\r\n    dispatch(updateQuestion({ sectionId, questionId, updates }));\r\n  }, [dispatch]);\r\n\r\n  const handleRemoveQuestion = useCallback((sectionId: string, questionId: string) => {\r\n    dispatch(removeQuestion({ sectionId, questionId }));\r\n  }, [dispatch]);\r\n\r\n  return {\r\n    // State\r\n    currentAssessment,\r\n    currentResponse,\r\n    loading,\r\n    error,\r\n    previewMode,\r\n    validationErrors,\r\n    \r\n    // Actions\r\n    loadAssessment,\r\n    createNewAssessment,\r\n    saveCurrentAssessment,\r\n    handleUpdateAssessment,\r\n    handleSubmitResponse,\r\n    handleSetCurrentResponse,\r\n    handleUpdateResponse,\r\n    handleUpdateResponseAnswer,\r\n    togglePreviewMode: handleTogglePreviewMode,\r\n    handleSetValidationError,\r\n    handleClearValidationError,\r\n    handleClearAllValidationErrors,\r\n    clearError: handleClearError,\r\n    setCurrentAssessment: handleSetCurrentResponse,\r\n    \r\n    // Section management\r\n    handleAddSection,\r\n    handleUpdateSection,\r\n    handleRemoveSection,\r\n    \r\n    // Question management\r\n    handleAddQuestion,\r\n    handleUpdateQuestion,\r\n    handleRemoveQuestion,\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}