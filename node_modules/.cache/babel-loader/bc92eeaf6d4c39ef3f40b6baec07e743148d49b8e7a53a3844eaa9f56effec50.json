{"ast":null,"code":"import { database } from './database';\nexport const candidatesService = {\n  async createCandidate(candidateData) {\n    const candidate = {\n      ...candidateData,\n      id: `candidate-${Date.now()}`,\n      appliedDate: new Date().toISOString()\n    };\n    await database.candidates.add(candidate);\n    return candidate;\n  },\n  async getCandidates(filters) {\n    let collection = database.candidates;\n\n    // Apply filters\n    if (filters.search) {\n      collection = collection.where('name').startsWithIgnoreCase(filters.search).or('email').startsWithIgnoreCase(filters.search);\n    }\n    if (filters.stage) {\n      collection = collection.where('stage').equals(filters.stage);\n    }\n    const total = await collection.count();\n    const candidates = await collection.offset((filters.page - 1) * filters.pageSize).limit(filters.pageSize).toArray();\n    return {\n      candidates,\n      total,\n      page: filters.page,\n      pageSize: filters.pageSize,\n      totalPages: Math.ceil(total / filters.pageSize)\n    };\n  },\n  async updateCandidateStage(id, stage) {\n    await database.candidates.update(id, {\n      stage\n    });\n  }\n};","map":{"version":3,"names":["database","candidatesService","createCandidate","candidateData","candidate","id","Date","now","appliedDate","toISOString","candidates","add","getCandidates","filters","collection","search","where","startsWithIgnoreCase","or","stage","equals","total","count","offset","page","pageSize","limit","toArray","totalPages","Math","ceil","updateCandidateStage","update"],"sources":["C:/Users/Dakshish/talentflow/src/services/candidatesService.ts"],"sourcesContent":["import { Candidate } from '../types';\r\nimport { database } from './database';\r\n\r\nexport const candidatesService = {\r\n  async createCandidate(candidateData: Omit<Candidate, 'id' | 'appliedDate'>): Promise<Candidate> {\r\n    const candidate: Candidate = {\r\n      ...candidateData,\r\n      id: `candidate-${Date.now()}`,\r\n      appliedDate: new Date().toISOString(),\r\n    };\r\n    \r\n    await database.candidates.add(candidate);\r\n    return candidate;\r\n  },\r\n\r\n  async getCandidates(filters: {\r\n    page: number;\r\n    pageSize: number;\r\n    search?: string;\r\n    stage?: string;\r\n  }) {\r\n    let collection = database.candidates;\r\n    \r\n    // Apply filters\r\n    if (filters.search) {\r\n      collection = collection.where('name').startsWithIgnoreCase(filters.search)\r\n                            .or('email').startsWithIgnoreCase(filters.search);\r\n    }\r\n    \r\n    if (filters.stage) {\r\n      collection = collection.where('stage').equals(filters.stage);\r\n    }\r\n\r\n    const total = await collection.count();\r\n    const candidates = await collection.offset((filters.page - 1) * filters.pageSize)\r\n                                      .limit(filters.pageSize)\r\n                                      .toArray();\r\n\r\n    return {\r\n      candidates,\r\n      total,\r\n      page: filters.page,\r\n      pageSize: filters.pageSize,\r\n      totalPages: Math.ceil(total / filters.pageSize),\r\n    };\r\n  },\r\n\r\n  async updateCandidateStage(id: string, stage: Candidate['stage']): Promise<void> {\r\n    await database.candidates.update(id, { stage });\r\n  },\r\n};"],"mappings":"AACA,SAASA,QAAQ,QAAQ,YAAY;AAErC,OAAO,MAAMC,iBAAiB,GAAG;EAC/B,MAAMC,eAAeA,CAACC,aAAoD,EAAsB;IAC9F,MAAMC,SAAoB,GAAG;MAC3B,GAAGD,aAAa;MAChBE,EAAE,EAAE,aAAaC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MAC7BC,WAAW,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;IACtC,CAAC;IAED,MAAMT,QAAQ,CAACU,UAAU,CAACC,GAAG,CAACP,SAAS,CAAC;IACxC,OAAOA,SAAS;EAClB,CAAC;EAED,MAAMQ,aAAaA,CAACC,OAKnB,EAAE;IACD,IAAIC,UAAU,GAAGd,QAAQ,CAACU,UAAU;;IAEpC;IACA,IAAIG,OAAO,CAACE,MAAM,EAAE;MAClBD,UAAU,GAAGA,UAAU,CAACE,KAAK,CAAC,MAAM,CAAC,CAACC,oBAAoB,CAACJ,OAAO,CAACE,MAAM,CAAC,CACnDG,EAAE,CAAC,OAAO,CAAC,CAACD,oBAAoB,CAACJ,OAAO,CAACE,MAAM,CAAC;IACzE;IAEA,IAAIF,OAAO,CAACM,KAAK,EAAE;MACjBL,UAAU,GAAGA,UAAU,CAACE,KAAK,CAAC,OAAO,CAAC,CAACI,MAAM,CAACP,OAAO,CAACM,KAAK,CAAC;IAC9D;IAEA,MAAME,KAAK,GAAG,MAAMP,UAAU,CAACQ,KAAK,CAAC,CAAC;IACtC,MAAMZ,UAAU,GAAG,MAAMI,UAAU,CAACS,MAAM,CAAC,CAACV,OAAO,CAACW,IAAI,GAAG,CAAC,IAAIX,OAAO,CAACY,QAAQ,CAAC,CAC9CC,KAAK,CAACb,OAAO,CAACY,QAAQ,CAAC,CACvBE,OAAO,CAAC,CAAC;IAE5C,OAAO;MACLjB,UAAU;MACVW,KAAK;MACLG,IAAI,EAAEX,OAAO,CAACW,IAAI;MAClBC,QAAQ,EAAEZ,OAAO,CAACY,QAAQ;MAC1BG,UAAU,EAAEC,IAAI,CAACC,IAAI,CAACT,KAAK,GAAGR,OAAO,CAACY,QAAQ;IAChD,CAAC;EACH,CAAC;EAED,MAAMM,oBAAoBA,CAAC1B,EAAU,EAAEc,KAAyB,EAAiB;IAC/E,MAAMnB,QAAQ,CAACU,UAAU,CAACsB,MAAM,CAAC3B,EAAE,EAAE;MAAEc;IAAM,CAAC,CAAC;EACjD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}