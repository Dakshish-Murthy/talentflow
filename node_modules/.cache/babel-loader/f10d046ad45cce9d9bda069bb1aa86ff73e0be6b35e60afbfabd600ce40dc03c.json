{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nexport const useFormValidation = () => {\n  _s();\n  const validateQuestion = useCallback((question, value) => {\n    // Required field validation\n    if (question.required && (!value || value === '' || Array.isArray(value) && value.length === 0)) {\n      return 'This field is required';\n    }\n\n    // Type-specific validation\n    switch (question.type) {\n      case 'numeric':\n        if (value && value !== '') {\n          const numValue = Number(value);\n          if (isNaN(numValue)) {\n            return 'Please enter a valid number';\n          }\n          if (question.min !== undefined && numValue < question.min) {\n            return `Value must be at least ${question.min}`;\n          }\n          if (question.max !== undefined && numValue > question.max) {\n            return `Value must be at most ${question.max}`;\n          }\n        }\n        break;\n      case 'short-text':\n      case 'long-text':\n        if (value && question.maxLength && value.length > question.maxLength) {\n          return `Text must be less than ${question.maxLength} characters`;\n        }\n        break;\n      case 'single-choice':\n      case 'multi-choice':\n        if (value && question.options && !question.options.includes(value)) {\n          return 'Please select a valid option';\n        }\n        break;\n      default:\n        break;\n    }\n    return null;\n  }, []);\n  const validateAllQuestions = useCallback((questions, responses) => {\n    const errors = {};\n    questions.forEach(question => {\n      const error = validateQuestion(question, responses[question.id]);\n      if (error) {\n        errors[question.id] = error;\n      }\n    });\n    return errors;\n  }, [validateQuestion]);\n  return {\n    validateQuestion,\n    validateAllQuestions\n  };\n};\n_s(useFormValidation, \"L9BpiiawnnMBrd1cjXKo5wmpXrk=\");","map":{"version":3,"names":["useCallback","useFormValidation","_s","validateQuestion","question","value","required","Array","isArray","length","type","numValue","Number","isNaN","min","undefined","max","maxLength","options","includes","validateAllQuestions","questions","responses","errors","forEach","error","id"],"sources":["C:/Users/Dakshish/talentflow/src/hooks/useFormValidation.ts"],"sourcesContent":["import { useCallback } from 'react';\r\nimport { Question } from '../types';\r\n\r\nexport const useFormValidation = () => {\r\n  const validateQuestion = useCallback((question: Question, value: any): string | null => {\r\n    // Required field validation\r\n    if (question.required && (!value || value === '' || (Array.isArray(value) && value.length === 0))) {\r\n      return 'This field is required';\r\n    }\r\n\r\n    // Type-specific validation\r\n    switch (question.type) {\r\n      case 'numeric':\r\n        if (value && value !== '') {\r\n          const numValue = Number(value);\r\n          if (isNaN(numValue)) {\r\n            return 'Please enter a valid number';\r\n          }\r\n          if (question.min !== undefined && numValue < question.min) {\r\n            return `Value must be at least ${question.min}`;\r\n          }\r\n          if (question.max !== undefined && numValue > question.max) {\r\n            return `Value must be at most ${question.max}`;\r\n          }\r\n        }\r\n        break;\r\n\r\n      case 'short-text':\r\n      case 'long-text':\r\n        if (value && question.maxLength && value.length > question.maxLength) {\r\n          return `Text must be less than ${question.maxLength} characters`;\r\n        }\r\n        break;\r\n\r\n      case 'single-choice':\r\n      case 'multi-choice':\r\n        if (value && question.options && !question.options.includes(value)) {\r\n          return 'Please select a valid option';\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return null;\r\n  }, []);\r\n\r\n  const validateAllQuestions = useCallback((questions: Question[], responses: Record<string, any>): Record<string, string> => {\r\n    const errors: Record<string, string> = {};\r\n\r\n    questions.forEach(question => {\r\n      const error = validateQuestion(question, responses[question.id]);\r\n      if (error) {\r\n        errors[question.id] = error;\r\n      }\r\n    });\r\n\r\n    return errors;\r\n  }, [validateQuestion]);\r\n\r\n  return {\r\n    validateQuestion,\r\n    validateAllQuestions,\r\n  };\r\n};"],"mappings":";AAAA,SAASA,WAAW,QAAQ,OAAO;AAGnC,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrC,MAAMC,gBAAgB,GAAGH,WAAW,CAAC,CAACI,QAAkB,EAAEC,KAAU,KAAoB;IACtF;IACA,IAAID,QAAQ,CAACE,QAAQ,KAAK,CAACD,KAAK,IAAIA,KAAK,KAAK,EAAE,IAAKE,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,IAAIA,KAAK,CAACI,MAAM,KAAK,CAAE,CAAC,EAAE;MACjG,OAAO,wBAAwB;IACjC;;IAEA;IACA,QAAQL,QAAQ,CAACM,IAAI;MACnB,KAAK,SAAS;QACZ,IAAIL,KAAK,IAAIA,KAAK,KAAK,EAAE,EAAE;UACzB,MAAMM,QAAQ,GAAGC,MAAM,CAACP,KAAK,CAAC;UAC9B,IAAIQ,KAAK,CAACF,QAAQ,CAAC,EAAE;YACnB,OAAO,6BAA6B;UACtC;UACA,IAAIP,QAAQ,CAACU,GAAG,KAAKC,SAAS,IAAIJ,QAAQ,GAAGP,QAAQ,CAACU,GAAG,EAAE;YACzD,OAAO,0BAA0BV,QAAQ,CAACU,GAAG,EAAE;UACjD;UACA,IAAIV,QAAQ,CAACY,GAAG,KAAKD,SAAS,IAAIJ,QAAQ,GAAGP,QAAQ,CAACY,GAAG,EAAE;YACzD,OAAO,yBAAyBZ,QAAQ,CAACY,GAAG,EAAE;UAChD;QACF;QACA;MAEF,KAAK,YAAY;MACjB,KAAK,WAAW;QACd,IAAIX,KAAK,IAAID,QAAQ,CAACa,SAAS,IAAIZ,KAAK,CAACI,MAAM,GAAGL,QAAQ,CAACa,SAAS,EAAE;UACpE,OAAO,0BAA0Bb,QAAQ,CAACa,SAAS,aAAa;QAClE;QACA;MAEF,KAAK,eAAe;MACpB,KAAK,cAAc;QACjB,IAAIZ,KAAK,IAAID,QAAQ,CAACc,OAAO,IAAI,CAACd,QAAQ,CAACc,OAAO,CAACC,QAAQ,CAACd,KAAK,CAAC,EAAE;UAClE,OAAO,8BAA8B;QACvC;QACA;MAEF;QACE;IACJ;IAEA,OAAO,IAAI;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMe,oBAAoB,GAAGpB,WAAW,CAAC,CAACqB,SAAqB,EAAEC,SAA8B,KAA6B;IAC1H,MAAMC,MAA8B,GAAG,CAAC,CAAC;IAEzCF,SAAS,CAACG,OAAO,CAACpB,QAAQ,IAAI;MAC5B,MAAMqB,KAAK,GAAGtB,gBAAgB,CAACC,QAAQ,EAAEkB,SAAS,CAAClB,QAAQ,CAACsB,EAAE,CAAC,CAAC;MAChE,IAAID,KAAK,EAAE;QACTF,MAAM,CAACnB,QAAQ,CAACsB,EAAE,CAAC,GAAGD,KAAK;MAC7B;IACF,CAAC,CAAC;IAEF,OAAOF,MAAM;EACf,CAAC,EAAE,CAACpB,gBAAgB,CAAC,CAAC;EAEtB,OAAO;IACLA,gBAAgB;IAChBiB;EACF,CAAC;AACH,CAAC;AAAClB,EAAA,CA9DWD,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}