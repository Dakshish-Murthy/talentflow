{"ast":null,"code":"import { api } from './api';\nexport const candidatesService = {\n  async getCandidates(params) {\n    const response = await api.getCandidates(params);\n    return response;\n  },\n  async createCandidate(candidateData) {\n    const response = await api.createCandidate(candidateData);\n    return response;\n  },\n  async updateCandidate(id, updates) {\n    const response = await api.updateCandidate(id, updates);\n    return response;\n  },\n  async getCandidateById(id) {\n    const response = await api.getCandidates();\n    const candidate = response.data.find(c => c.id === id);\n    if (!candidate) throw new Error('Candidate not found');\n    return candidate;\n  },\n  async getCandidateTimeline(candidateId) {\n    const response = await api.getCandidateTimeline(candidateId);\n    return response;\n  }\n};","map":{"version":3,"names":["api","candidatesService","getCandidates","params","response","createCandidate","candidateData","updateCandidate","id","updates","getCandidateById","candidate","data","find","c","Error","getCandidateTimeline","candidateId"],"sources":["C:/Users/Dakshish/talentflow/src/services/candidatesService.ts"],"sourcesContent":["import { Candidate } from '../types';\r\nimport { api } from './api';\r\n\r\nexport const candidatesService = {\r\n  async getCandidates(params?: { page?: number; pageSize?: number; search?: string; stage?: string }) {\r\n    const response = await api.getCandidates(params);\r\n    return response;\r\n  },\r\n\r\n  async createCandidate(candidateData: Omit<Candidate, 'id' | 'appliedDate' | 'notes'>) {\r\n    const response = await api.createCandidate(candidateData);\r\n    return response;\r\n  },\r\n\r\n  async updateCandidate(id: string, updates: Partial<Candidate>) {\r\n    const response = await api.updateCandidate(id, updates);\r\n    return response;\r\n  },\r\n\r\n  async getCandidateById(id: string) {\r\n    const response = await api.getCandidates();\r\n    const candidate = response.data.find((c: Candidate) => c.id === id);\r\n    if (!candidate) throw new Error('Candidate not found');\r\n    return candidate;\r\n  },\r\n\r\n  async getCandidateTimeline(candidateId: string) {\r\n    const response = await api.getCandidateTimeline(candidateId);\r\n    return response;\r\n  }\r\n};"],"mappings":"AACA,SAASA,GAAG,QAAQ,OAAO;AAE3B,OAAO,MAAMC,iBAAiB,GAAG;EAC/B,MAAMC,aAAaA,CAACC,MAA8E,EAAE;IAClG,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACE,aAAa,CAACC,MAAM,CAAC;IAChD,OAAOC,QAAQ;EACjB,CAAC;EAED,MAAMC,eAAeA,CAACC,aAA8D,EAAE;IACpF,MAAMF,QAAQ,GAAG,MAAMJ,GAAG,CAACK,eAAe,CAACC,aAAa,CAAC;IACzD,OAAOF,QAAQ;EACjB,CAAC;EAED,MAAMG,eAAeA,CAACC,EAAU,EAAEC,OAA2B,EAAE;IAC7D,MAAML,QAAQ,GAAG,MAAMJ,GAAG,CAACO,eAAe,CAACC,EAAE,EAAEC,OAAO,CAAC;IACvD,OAAOL,QAAQ;EACjB,CAAC;EAED,MAAMM,gBAAgBA,CAACF,EAAU,EAAE;IACjC,MAAMJ,QAAQ,GAAG,MAAMJ,GAAG,CAACE,aAAa,CAAC,CAAC;IAC1C,MAAMS,SAAS,GAAGP,QAAQ,CAACQ,IAAI,CAACC,IAAI,CAAEC,CAAY,IAAKA,CAAC,CAACN,EAAE,KAAKA,EAAE,CAAC;IACnE,IAAI,CAACG,SAAS,EAAE,MAAM,IAAII,KAAK,CAAC,qBAAqB,CAAC;IACtD,OAAOJ,SAAS;EAClB,CAAC;EAED,MAAMK,oBAAoBA,CAACC,WAAmB,EAAE;IAC9C,MAAMb,QAAQ,GAAG,MAAMJ,GAAG,CAACgB,oBAAoB,CAACC,WAAW,CAAC;IAC5D,OAAOb,QAAQ;EACjB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}